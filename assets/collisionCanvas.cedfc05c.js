import{m as e,a as t,c as a}from"./collisionCanvasMessaging.aebe8dac.js";import{i as n}from"./valueConverters.dc38a941.js";const s=(e,t)=>{const a=Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2));return{x:t.x+(t.x-e.x)/a*3,y:t.y+(t.y-e.y)/a*3}};self.addEventListener("message",(function o(i){const r=i.data instanceof OffscreenCanvas?i.data:"SELF_HOST_CANVAS"===i.data?new OffscreenCanvas(0,0):n('Either transfer a OffScreenCanvas to worker or send string "SELF_HOSTED_CANVAS" as initial message to worker');self.removeEventListener("message",o),function(a,o,i){var r;const l=o(e,t),c=null!=(r=a.getContext("2d"))?r:n("Could not get context of tracker canvas");let d=0;l.on("canvasInfo",(e=>{a.height=e.height,a.width=e.width,c.scale(e.scaleFactor,e.scaleFactor),d=e.lineWidth}));const f={};l.on("positionData",(e=>{e.forEach((e=>{const t=f[e.id];f[e.id]={x:e.x,y:e.y};const n=null!=t&&!(t.x===e.x&&t.y===e.y)&&s(t,e);i&&(e.x<0||e.x>a.width||e.y<0||e.y>a.height||n&&0!==c.getImageData(n.x,n.y,1,1).data[3])&&l.send("reportCollision",e.id),e.fill&&null!=t&&(c.beginPath(),c.lineCap="square",c.lineWidth=d,c.strokeStyle=e.fill,c.moveTo(t.x,t.y),c.lineTo(e.x,e.y),c.stroke(),c.closePath(),t.x=e.x,t.y=e.y)}))}))}(r,a(self),!0)}));
//# sourceMappingURL=collisionCanvas.cedfc05c.js.map
