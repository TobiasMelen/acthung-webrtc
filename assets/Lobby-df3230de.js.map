{"version":3,"file":"Lobby-df3230de.js","sources":["../../src/hooks/useConnectionForLobby.ts","../../src/hooks/useEffectWithDeps.ts","../../src/hooks/useStateForLobby.ts","../../src/collisionCanvas/collisionCanvasMessaging.ts","../../src/messaging/webWorkerMessageChannel.ts","../../src/gameCanvas/snakeGameContext.ts","../../src/components/GameRound.tsx","../../src/qr.ts","../../src/components/QrCode.tsx","../../src/components/Waiting.tsx","../../src/hooks/useLocalStorage.ts","../../src/components/GameSettingsContext.tsx","../../src/components/Scoreboard.tsx","../../src/components/Lobby.tsx"],"sourcesContent":["import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { DEFAULT_RTC_PEER_CONFIG, SIGNALING_URL } from \"../constants\";\nimport {\n  createMessageChannelToPlayer,\n  MessageChannelToPlayer,\n} from \"../messaging/dataChannelMessaging\";\nimport useJsonWebsocket from \"./useJsonWebsocket\";\n\nexport type PlayerConnections = {\n  [id: string]: MessageChannelToPlayer;\n};\n\nexport default function useLobbyConnection(lobbyName: string) {\n  const [clientConnections, setClientConnections] = useState<{\n    [id: string]: [RTCPeerConnection, MessageChannelToPlayer];\n  }>({});\n\n  const socket = useJsonWebsocket(`${SIGNALING_URL}/${lobbyName}`);\n\n  const removeStaleConnection = useCallback(\n    (staleConnection: RTCPeerConnection) => {\n      setClientConnections((connections) =>\n        Object.keys(connections).reduce((acc, key) => {\n          if (connections[key]?.[0] !== staleConnection) {\n            acc[key] = connections[key];\n          } else {\n            try {\n              connections[key][1].destroy();\n            } catch (err) {\n              console.error(\"Error cleaning up stale connection\", err);\n            }\n          }\n          return acc;\n        }, {} as typeof clientConnections)\n      );\n    },\n    [setClientConnections]\n  );\n\n  useEffect(() => {\n    if (socket.status !== \"connected\") {\n      return;\n    }\n\n    const unbindSocketListener = socket.addListener(\n      async ({ from: offerFrom, data }) => {\n        if (data.type !== \"offer\" || offerFrom == null) {\n          return;\n        }\n        const clientConnection = new RTCPeerConnection(DEFAULT_RTC_PEER_CONFIG);\n\n        clientConnection.onicecandidate = (event) =>\n          event.candidate != null &&\n          socket.send({\n            to: offerFrom,\n            data: event.candidate.toJSON(),\n          });\n        const unbindPeerSignaling = socket.addListener(\n          ({ from: candidateFrom, data }) =>\n            candidateFrom === offerFrom &&\n            \"candidate\" in data &&\n            clientConnection.addIceCandidate(data)\n        );\n        const closeConnection = () => {\n          unbindPeerSignaling?.();\n          removeStaleConnection(clientConnection);\n        };\n        clientConnection.ondatachannel = ({ channel }: RTCDataChannelEvent) => {\n          channel.onclose = closeConnection;\n          setClientConnections((connections) => ({\n            ...connections,\n            [offerFrom]: [\n              clientConnection,\n              createMessageChannelToPlayer(clientConnection, channel),\n            ],\n          }));\n        };\n        clientConnection.onconnectionstatechange = () => {\n          const state = clientConnection.connectionState;\n          if (state == \"disconnected\") {\n            closeConnection();\n          }\n        };\n        await clientConnection.setRemoteDescription(\n          new RTCSessionDescription(data)\n        );\n        const localDescription = await clientConnection.createAnswer();\n        await clientConnection.setLocalDescription(localDescription);\n        socket.send({ data: localDescription, to: offerFrom });\n      }\n    );\n    return unbindSocketListener;\n  }, [socket]);\n\n  const playerConnections = useMemo(\n    () =>\n      Object.entries(clientConnections).reduce((acc, [key, value]) => {\n        acc[key] = value[1];\n        return acc;\n      }, {} as PlayerConnections),\n    [clientConnections]\n  );\n\n  return [socket.status, playerConnections] as const;\n}\n","import { useEffect, useRef, DependencyList, EffectCallback } from \"react\";\n\nexport default function useEffectWithDeps<Deps extends DependencyList>(\n  effect: (prevDeps?: Deps) => ReturnType<EffectCallback>,\n  deps: Deps\n) {\n  const dependencyRef = useRef<Readonly<Deps>>();\n  useEffect(() => {\n    const prevDeps = dependencyRef.current;\n    dependencyRef.current = deps;\n    return effect(prevDeps);\n  }, deps);\n}\n","import { useState, useMemo, useRef, useEffect } from \"react\";\nimport { PlayerConnections } from \"./useConnectionForLobby\";\nimport useEffectWithDeps from \"./useEffectWithDeps\";\nimport { ALL_COLORS } from \"../constants\";\nimport { extractObjectDiff } from \"../utility\";\nimport {\n  MessageChannelToPlayer,\n  MessageTypesToLobby,\n  MessageTypesToPlayer,\n} from \"../messaging/dataChannelMessaging\";\n\ntype PlayerStates = { [id: string]: LobbyPlayer };\n\ntype PlayerFunctions = {\n  setState(state: PlayerState[\"state\"]): void;\n  setScore(score: number): void;\n  onTurnInput(callBack: (turn: number) => void): void;\n};\n\nexport type LobbyPlayer = PlayerState &\n  PlayerFunctions & { id: string; timeout?: number };\n\nconst getColorAvailability = (assignedColors: string[] = []) =>\n  ALL_COLORS.reduce((acc, color) => {\n    acc[color] = assignedColors.indexOf(color) === -1;\n    return acc;\n  }, {} as { [color: string]: boolean });\n\n/*\n * The Lobby component is responsible for converting webrtc channels into player objects with state and client messaging.\n */\nexport default function useStateForLobby(clientConnections: PlayerConnections) {\n  const createPlayerModifier =\n    (playerKey: string) => (fn: (prev: LobbyPlayer) => LobbyPlayer) =>\n      setPlayerState(({ [playerKey]: player, ...otherPlayers }) => ({\n        ...otherPlayers,\n        [playerKey]: fn(player),\n      }));\n\n  const [playerStates, setPlayerState] = useState<PlayerStates>({});\n  const [gameState, setGameState] = useState<GameState>({\n    colorAvailability: getColorAvailability(),\n    allowSinglePlayer: true,\n  });\n\n  //Create players from connections\n  useEffectWithDeps(\n    (prevDeps) => {\n      const [prevConnections] = prevDeps ?? [{}];\n      setPlayerState((playerStates) => {\n        const connectionKeys = Object.keys(clientConnections);\n        //Timeout disconnecting players.\n        const disconnectingPlayers = Object.keys(playerStates)\n          .filter((id) => !connectionKeys.includes(id))\n          .map((disconnectId) => {\n            clearTimeout(playerStates[disconnectId]?.timeout);\n            return {\n              ...playerStates[disconnectId],\n              timeout: window.setTimeout(\n                () =>\n                  setPlayerState(\n                    ({ [disconnectId]: _removePlayer, ...playerStates }) =>\n                      playerStates\n                  ),\n                2000\n              ),\n            };\n          })\n          .reduce((acc, player) => {\n            acc[player.id] = player;\n            return acc;\n          }, {} as PlayerStates);\n\n        //if we get new players, we should update colors.\n        let updatedColorAvailability: typeof gameState[\"colorAvailability\"];\n        let queuespot = 1;\n        const connectedPlayers = connectionKeys.reduce(\n          (acc, connKey, index) => {\n            const prevPlayerState = playerStates[connKey];\n            clearTimeout(prevPlayerState?.timeout);\n            const modifyPlayer = createPlayerModifier(connKey);\n            let playerState =\n              prevPlayerState ??\n              (() => {\n                updatedColorAvailability = updatedColorAvailability ?? {\n                  ...gameState.colorAvailability,\n                };\n                //Create new player if color can be assigned.\n                const assignedColor = Object.entries(\n                  updatedColorAvailability\n                ).find(([_color, avail]) => avail)?.[0];\n                if (assignedColor != null) {\n                  updatedColorAvailability[assignedColor] = false;\n                  return {\n                    id: connKey,\n                    name: `Player ${index + 1}`,\n                    color: assignedColor,\n                    ready: false,\n                    score: 0,\n                    state: \"joining\",\n                    latency: 0,\n                    //By saving the functions here they will be in data communicated through datachannel.\n                    //JSON stringify will fix it further down the line, but it's still a bit shoddy.\n                    setState: (state: PlayerState[\"state\"]) =>\n                      modifyPlayer((player) => ({ ...player, state })),\n                    setScore: (score: number) =>\n                      modifyPlayer((player) => ({ ...player, score })),\n                    onTurnInput: (turner) =>\n                      clientConnections[connKey]?.on(\"turn\", turner),\n                  } as LobbyPlayer;\n                }\n              })();\n            //Connection has no player and no player could be assigned\n            if (playerState == null) {\n              clientConnections[connKey].send(\"err\", {\n                reason: \"lobbyFull\",\n                queuespot,\n              });\n              queuespot++;\n              return acc;\n            }\n            //Wire or re-wire player message handlers for new players or connections\n            const currentConnection = clientConnections[connKey];\n            if (\n              prevPlayerState == null ||\n              currentConnection !== prevConnections[connKey]\n            ) {\n              const bindMessageToStateKey = <TModel>(\n                eventName: MessageTypesToLobby,\n                modifier: (cb: (input: TModel) => any) => void,\n                keyName: keyof TModel\n              ) => {\n                currentConnection.on(eventName, (data) =>\n                  modifier((old) => ({ ...old, [keyName]: data }))\n                );\n              };\n              bindMessageToStateKey(\"setColor\", modifyPlayer, \"color\");\n              bindMessageToStateKey(\"setName\", modifyPlayer, \"name\");\n              bindMessageToStateKey(\"setReady\", modifyPlayer, \"ready\");\n              bindMessageToStateKey(\n                \"allowSinglePlayer\",\n                setGameState,\n                \"allowSinglePlayer\"\n              );\n              playerState = {\n                ...playerState,\n                onTurnInput: (turner) => currentConnection.on(\"turn\", turner),\n              };\n            }\n            acc[connKey] = playerState;\n            return acc;\n          },\n          {} as typeof playerStates\n        );\n        return { ...disconnectingPlayers, ...connectedPlayers };\n      });\n    },\n    [clientConnections] as const\n  );\n\n  //Update gamestate colors from player-updates\n  const assignedColors = Object.values(playerStates).map(\n    (player) => player.color\n  );\n  useEffect(() => {\n    setGameState((gameState) => ({\n      ...gameState,\n      colorAvailability: getColorAvailability(assignedColors),\n    }));\n  }, [assignedColors.join(\":\")]);\n\n  //Report individual playerstates to clients\n  useEffectWithDeps(\n    (prevDeps) => {\n      const [prevClientConnections, prevPlayerStates] = prevDeps ?? [];\n      Object.keys(playerStates).forEach((key) => {\n        const newState = playerStates[key];\n        const oldState = prevPlayerStates?.[key];\n        //send complete state if connection changed or state is new\n        if (\n          clientConnections[key] != prevClientConnections?.[key] ||\n          oldState == null\n        ) {\n          clientConnections[key]?.send(\"playerState\", newState);\n        }\n        //send partial state updates to existing connections\n        else if (newState !== oldState) {\n          clientConnections[key]?.send(\n            \"playerState\",\n            extractObjectDiff(oldState, newState, \"function\")\n          );\n        }\n      });\n    },\n    [clientConnections, playerStates] as const\n  );\n\n  //Report gamestate to clients\n  useEffectWithDeps(\n    (prevDeps) => {\n      const [prevClientConnections, prevGameState] = prevDeps ?? [];\n      const stateUpdate =\n        prevGameState !== gameState &&\n        extractObjectDiff(prevGameState, gameState);\n      Object.keys(clientConnections).forEach((id) => {\n        const currentConn = clientConnections[id];\n        //Send complete state to new/updated connections\n        if (currentConn != prevClientConnections?.[id]) {\n          currentConn?.send(\"gameState\", gameState);\n        }\n        //Otherwise send updated state keys only\n        else if (stateUpdate) {\n          currentConn?.send(\"gameState\", stateUpdate);\n        }\n      });\n    },\n    [clientConnections, gameState] as const\n  );\n\n  const players = useMemo(() => Object.values(playerStates), [playerStates]);\n\n  return [players, gameState] as const;\n}\n","import { Converter, MessageChannel } from \"../messaging/setupMessageChannel\";\nimport { jsonConverter, stringConverter } from \"../messaging/valueConverters\";\n\nexport const messagesToTracker = {\n  canvasInfo: jsonConverter as Converter<{\n    width: number;\n    height: number;\n    scaleFactor: number;\n    lineWidth: number;\n  }>,\n  positionData: jsonConverter as Converter<\n    { id: string; x: number; y: number; fill?: string }[]\n  >,\n};\nexport const messagesFromTracker = {\n  reportCollision: stringConverter,\n};\n\nexport type TrackerMessageChannel = MessageChannel<\n  typeof messagesToTracker,\n  typeof messagesFromTracker\n>;\n","import setupMessageChannel, {\n  ConverterCollection,\n} from \"./setupMessageChannel\";\n\nexport function createWebWorkerMessageChannel(\n  worker: Worker | DedicatedWorkerGlobalScope\n) {\n  return <\n    SendMessages extends ConverterCollection,\n    ReceiveMessages extends ConverterCollection\n  >(\n    sends: SendMessages,\n    recieves: ReceiveMessages\n  ) =>\n    setupMessageChannel({\n      send: worker.postMessage.bind(worker),\n      bindReceive(receive) {\n        const listener = (ev: any) => receive(ev.data);\n        worker.addEventListener(\"message\", listener);\n        return () => worker.removeEventListener(\"message\", listener)\n      },\n    })(sends, recieves);\n}\n","import { inlineThrow } from \"../utility\";\nimport {\n  messagesFromTracker,\n  messagesToTracker,\n  TrackerMessageChannel,\n} from \"../collisionCanvas/collisionCanvasMessaging\";\nimport CollisionTrackerWorker from \"../collisionCanvas/collisionCanvas?worker\";\nimport { createWebWorkerMessageChannel } from \"../messaging/webWorkerMessageChannel\";\n\nexport type SnakeInput = {\n  id: string;\n  color: string;\n  onCollision: () => void;\n};\n\nconst frameTimeSixtyFps = 1000 / 60;\n\nexport type GameInput = Parameters<typeof snakeGameContext>[1];\n\nexport default function snakeGameContext(\n  canvas: HTMLCanvasElement | OffscreenCanvas,\n  {\n    snakeSpeed = 3.3,\n    lineWidth = 8,\n    turnRadius = 0.05,\n    startPositionSpread = 0.5,\n    startingHoleChancePercantage = -5,\n    holeDuration = 10,\n    maxVerticalResolution = 1080,\n    checkCollisions = true,\n    useTrackingCollisionCanvas = false,\n  } = {}\n) {\n  const context =\n    (canvas.getContext(\"2d\", {\n      desynchronized: true,\n      willReadFrequently: true,\n    }) as OffscreenCanvasRenderingContext2D) ??\n    inlineThrow(\"Could not get Snake canvas 2d context\");\n  const scaleFactor =\n    canvas.height > maxVerticalResolution\n      ? canvas.height / maxVerticalResolution\n      : 1;\n  context.scale(scaleFactor, scaleFactor);\n\n  const createNewSnake = (input: SnakeInput) => ({\n    ...input,\n    hasCollided: false,\n    turn: 0,\n    direction: Math.round(Math.random() * 360),\n    holeChance: startingHoleChancePercantage,\n    position: {\n      x:\n        (Math.random() + startPositionSpread) *\n        (context.canvas.width * startPositionSpread),\n      y:\n        (Math.random() + startPositionSpread) *\n        (context.canvas.height * startPositionSpread),\n    },\n    currentHoleSection: 0,\n    erasePos: null as null | { x: number; y: number },\n  });\n\n  const snakes: (ReturnType<typeof createNewSnake> & SnakeInput)[] = [];\n\n  //Create or update snake and return turntrigger\n  const inputSnakeData = (input: SnakeInput) => {\n    let snake = snakes.find((snake) => snake.id === input.id);\n    if (snake == null) {\n      snake = createNewSnake(input);\n      snakes.push(snake);\n    }\n    return (turn: number) => {\n      snake!.turn = turn;\n    };\n  };\n\n  //function for colliding and drawing snake\n  function moveSnake(\n    snake: typeof snakes[0],\n    snakeSpeed: number,\n    turnAngle: number,\n    checkCollision = false\n  ) {\n    if (snake.hasCollided) {\n      return;\n    }\n    if (snake.currentHoleSection == 0) {\n      if (snake.holeChance > 0 && Math.random() * 100 < snake.holeChance) {\n        snake.currentHoleSection = holeDuration;\n        snake.holeChance = startingHoleChancePercantage;\n      } else {\n        snake.holeChance = snake.holeChance + 0.1;\n      }\n    }\n\n    const willCollide =\n      checkCollision &&\n      (snake.position.x < 0 ||\n        snake.position.x > canvas.width ||\n        snake.position.y < 0 ||\n        snake.position.y > canvas.height ||\n        context.getImageData(\n          snake.position.x +\n            (snakeSpeed + lineWidth / 2) * Math.cos(snake.direction),\n          snake.position.y +\n            (snakeSpeed + lineWidth / 2) * Math.sin(snake.direction),\n          1,\n          1\n        ).data[3] !== 0);\n\n    if (willCollide) {\n      snake.hasCollided = true;\n      snake.onCollision();\n    }\n\n    if (snake.erasePos != null) {\n      context.beginPath();\n      context.lineCap = \"square\";\n      context.lineWidth = lineWidth + 3;\n      const prevCompOp = context.globalCompositeOperation;\n      context.globalCompositeOperation = \"destination-out\";\n      context.moveTo(snake.erasePos.x, snake.erasePos.y);\n      context.lineTo(snake.position.x, snake.position.y);\n      context.stroke();\n      context.closePath();\n      snake.erasePos = null;\n      context.globalCompositeOperation = prevCompOp;\n    }\n\n    if (snake.currentHoleSection > 0) {\n      snake.erasePos = { ...snake.position };\n      snake.currentHoleSection--;\n    }\n\n    context.beginPath();\n    context.lineCap = \"square\";\n    context.lineWidth = lineWidth;\n    context.strokeStyle = snake.color;\n    context.moveTo(snake.position.x, snake.position.y);\n    snake.direction += snake.turn * turnAngle;\n    snake.position.x += snakeSpeed * Math.cos(snake.direction);\n    snake.position.y += snakeSpeed * Math.sin(snake.direction);\n    context.lineTo(snake.position.x, snake.position.y);\n    context.stroke();\n    context.closePath();\n  }\n\n  //Setup tracker canvases\n  const trackers: {\n    channel: TrackerMessageChannel;\n    interval: number;\n    latestReport: number;\n  }[] = [];\n  function addTrackingChannel(\n    channel: TrackerMessageChannel,\n    interval: number,\n    //Collision reporting needs to be guarded from this side to disable hacking attempts.\n    reportsCollisions: boolean\n  ) {\n    channel.send(\"canvasInfo\", {\n      width: canvas.width,\n      height: canvas.height,\n      scaleFactor,\n      lineWidth,\n    });\n    trackers.push({ interval, channel, latestReport: 0 });\n    reportsCollisions &&\n      channel.on(\"reportCollision\", (id) => {\n        const snake = snakes.find((snake) => snake.id === id);\n        if (snake) {\n          snake.hasCollided = true;\n          snake.onCollision();\n        }\n      });\n  }\n\n  //Create collision canvas\n  const collisionCanvasWorker =\n    useTrackingCollisionCanvas &&\n    (() => {\n      const collisionCanvasWorker = new CollisionTrackerWorker();\n      collisionCanvasWorker.postMessage(\"SELF_HOST_CANVAS\");\n      const collisionTracker = createWebWorkerMessageChannel(\n        collisionCanvasWorker\n      )(messagesToTracker, messagesFromTracker);\n      addTrackingChannel(collisionTracker, 50, true);\n      return collisionCanvasWorker;\n    })();\n\n  let stopped = true;\n  function run() {\n    let timeStamp = performance.now();\n    let collisionCheckOdd = false;\n    function drawFrame(now: number) {\n      const frameTimeActual = now - timeStamp;\n      let frameTimeOffset = frameTimeActual / frameTimeSixtyFps;\n      //Don't skip too far if we're lagging.\n      frameTimeOffset = frameTimeOffset < 4 ? frameTimeOffset : 4;\n      const frameTimeSnakeSpeed = snakeSpeed * frameTimeOffset;\n      const frameTimeTurnRadius = turnRadius * frameTimeOffset;\n      timeStamp = now;\n      for (let index = 0; index < snakes.length; index++) {\n        moveSnake(\n          snakes[index],\n          frameTimeSnakeSpeed,\n          frameTimeTurnRadius,\n          checkCollisions && !!(index % 2) === collisionCheckOdd\n        );\n      }\n      collisionCheckOdd = !collisionCheckOdd;\n      \n      for (const tracker of trackers) {\n        //do not create redundant position data objects\n        let positionData = null;\n        if (now - tracker.latestReport >= tracker.interval) {\n          positionData ??= snakes\n            .filter((snake) => !snake.hasCollided)\n            .map((snake) => ({\n              id: snake.id,\n              fill: snake.currentHoleSection ? undefined : snake.color,\n              x: snake.position.x,\n              y: snake.position.y,\n            }));\n          tracker.channel.send(\"positionData\", positionData);\n        }\n      }\n      !stopped && requestAnimationFrame(drawFrame);\n    }\n    if (stopped) {\n      stopped = false;\n      requestAnimationFrame(drawFrame);\n    }\n  }\n  function stop() {\n    stopped = true;\n  }\n\n  return {\n    run,\n    stop,\n    inputSnakeData,\n    addTrackingChannel,\n    destroy() {\n      collisionCanvasWorker && collisionCanvasWorker.terminate();\n      stop();\n    },\n  };\n}\n","import React, { useRef, useEffect, CSSProperties, useState } from \"react\";\nimport snakeGameContext, { SnakeInput } from \"../gameCanvas/snakeGameContext\";\n\ntype Props = {\n  run: boolean;\n  input: (SnakeInput & {\n    onTurnInput(callBack: (turn: number) => void): void;\n  })[];\n  children?: React.ReactNode;\n};\n\nconst canvasStyle: CSSProperties = {\n  flexGrow: 1,\n  height: \"100%\",\n  width: \"100%\",\n};\nexport default function GameRound({ run, input, children }: Props) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [canvas, setCanvas] = useState<\n    PromiseResult<ReturnType<typeof createSnakeCanvas>>\n  >();\n\n  useEffect(() => {\n    if (canvasRef.current == null || canvas) {\n      return () =>\n        setCanvas((canvas) => {\n          canvas?.destroy();\n          return undefined;\n        });\n    }\n    createSnakeCanvas(canvasRef.current).then((canvas) => {\n      setCanvas(canvas);\n    });\n  }, [canvasRef.current]);\n\n  useEffect(() => {\n    if (canvas == null) {\n      return;\n    }\n    for (const snakeInput of input) {\n      const turner = canvas.inputSnakeData(snakeInput);\n      snakeInput.onTurnInput(turner);\n    }\n  }, [canvas, input]);\n\n  useEffect(() => {\n    if (canvas == null) {\n      return;\n    }\n    run ? canvas.run() : canvas.stop();\n  }, [canvas, run]);\n\n  return <canvas ref={canvasRef} style={canvasStyle} />;\n}\n\nasync function createSnakeCanvas(\n  canvas: HTMLCanvasElement,\n  {\n    maxVerticalResolution = 1080,\n    ...contextOptions\n  }: { maxVerticalResolution?: number } & Parameters<\n    typeof snakeGameContext\n  >[1] = {}\n) {\n  //Create scaled canvas for rendering\n  canvas.style.height = \"100%\";\n  canvas.style.width = \"100%\";\n  if (canvas.clientHeight > maxVerticalResolution) {\n    canvas.height = maxVerticalResolution;\n    canvas.width =\n      (maxVerticalResolution / canvas.clientHeight) * canvas.clientWidth;\n  } else {\n    canvas.height = canvas.clientHeight;\n    canvas.width = canvas.clientWidth;\n  }\n\n  //If possibly to create gamecontext offscreen, in seperate web-worker, do so. Otherwise initialize it directly.\n  const gameContext = await (\"OffscreenCanvas\" in window && false\n    ? //Load offscreen script lazily to delay worker instantion until necessary\n      (await import(\"../gameCanvas/offscreenGame\")).default\n    : snakeGameContext)(canvas, contextOptions);\n\n  return {\n    ...gameContext,\n    destroy() {\n      gameContext.destroy();\n    },\n  };\n}\n","//Started stripping https://gist.github.com/tupham81/a04d96cd48c8bcb8d4dc5301f3653937 to only support byte data, L error correction and only 0 mask.\n//Sort of gave up midway through.\nexport default function QR() {\n  var VERSIONS = [\n    [[]],\n    [[10, 7, 17, 13], [1, 1, 1, 1], []],\n    [\n      [16, 10, 28, 22],\n      [1, 1, 1, 1],\n      [4, 16],\n    ],\n    [\n      [26, 15, 22, 18],\n      [1, 1, 2, 2],\n      [4, 20],\n    ],\n    [\n      [18, 20, 16, 26],\n      [2, 1, 4, 2],\n      [4, 24],\n    ],\n    [\n      [24, 26, 22, 18],\n      [2, 1, 4, 4],\n      [4, 28],\n    ],\n    [\n      [16, 18, 28, 24],\n      [4, 2, 4, 4],\n      [4, 32],\n    ],\n    [\n      [18, 20, 26, 18],\n      [4, 2, 5, 6],\n      [4, 20, 36],\n    ],\n    [\n      [22, 24, 26, 22],\n      [4, 2, 6, 6],\n      [4, 22, 40],\n    ],\n    [\n      [22, 30, 24, 20],\n      [5, 2, 8, 8],\n      [4, 24, 44],\n    ],\n    [\n      [26, 18, 28, 24],\n      [5, 4, 8, 8],\n      [4, 26, 48],\n    ],\n    [\n      [30, 20, 24, 28],\n      [5, 4, 11, 8],\n      [4, 28, 52],\n    ],\n    [\n      [22, 24, 28, 26],\n      [8, 4, 11, 10],\n      [4, 30, 56],\n    ],\n    [\n      [22, 26, 22, 24],\n      [9, 4, 16, 12],\n      [4, 32, 60],\n    ],\n    [\n      [24, 30, 24, 20],\n      [9, 4, 16, 16],\n      [4, 24, 44, 64],\n    ],\n    [\n      [24, 22, 24, 30],\n      [10, 6, 18, 12],\n      [4, 24, 46, 68],\n    ],\n    [\n      [28, 24, 30, 24],\n      [10, 6, 16, 17],\n      [4, 24, 48, 72],\n    ],\n    [\n      [28, 28, 28, 28],\n      [11, 6, 19, 16],\n      [4, 28, 52, 76],\n    ],\n    [\n      [26, 30, 28, 28],\n      [13, 6, 21, 18],\n      [4, 28, 54, 80],\n    ],\n    [\n      [26, 28, 26, 26],\n      [14, 7, 25, 21],\n      [4, 28, 56, 84],\n    ],\n    [\n      [26, 28, 28, 30],\n      [16, 8, 25, 20],\n      [4, 32, 60, 88],\n    ],\n    [\n      [26, 28, 30, 28],\n      [17, 8, 25, 23],\n      [4, 26, 48, 70, 92],\n    ],\n    [\n      [28, 28, 24, 30],\n      [17, 9, 34, 23],\n      [4, 24, 48, 72, 96],\n    ],\n    [\n      [28, 30, 30, 30],\n      [18, 9, 30, 25],\n      [4, 28, 52, 76, 100],\n    ],\n    [\n      [28, 30, 30, 30],\n      [20, 10, 32, 27],\n      [4, 26, 52, 78, 104],\n    ],\n    [\n      [28, 26, 30, 30],\n      [21, 12, 35, 29],\n      [4, 30, 56, 82, 108],\n    ],\n    [\n      [28, 28, 30, 28],\n      [23, 12, 37, 34],\n      [4, 28, 56, 84, 112],\n    ],\n    [\n      [28, 30, 30, 30],\n      [25, 12, 40, 34],\n      [4, 32, 60, 88, 116],\n    ],\n    [\n      [28, 30, 30, 30],\n      [26, 13, 42, 35],\n      [4, 24, 48, 72, 96, 120],\n    ],\n    [\n      [28, 30, 30, 30],\n      [28, 14, 45, 38],\n      [4, 28, 52, 76, 100, 124],\n    ],\n    [\n      [28, 30, 30, 30],\n      [29, 15, 48, 40],\n      [4, 24, 50, 76, 102, 128],\n    ],\n    [\n      [28, 30, 30, 30],\n      [31, 16, 51, 43],\n      [4, 28, 54, 80, 106, 132],\n    ],\n    [\n      [28, 30, 30, 30],\n      [33, 17, 54, 45],\n      [4, 32, 58, 84, 110, 136],\n    ],\n    [\n      [28, 30, 30, 30],\n      [35, 18, 57, 48],\n      [4, 28, 56, 84, 112, 140],\n    ],\n    [\n      [28, 30, 30, 30],\n      [37, 19, 60, 51],\n      [4, 32, 60, 88, 116, 144],\n    ],\n    [\n      [28, 30, 30, 30],\n      [38, 19, 63, 53],\n      [4, 28, 52, 76, 100, 124, 148],\n    ],\n    [\n      [28, 30, 30, 30],\n      [40, 20, 66, 56],\n      [4, 22, 48, 74, 100, 126, 152],\n    ],\n    [\n      [28, 30, 30, 30],\n      [43, 21, 70, 59],\n      [4, 26, 52, 78, 104, 130, 156],\n    ],\n    [\n      [28, 30, 30, 30],\n      [45, 22, 74, 62],\n      [4, 30, 56, 82, 108, 134, 160],\n    ],\n    [\n      [28, 30, 30, 30],\n      [47, 24, 77, 65],\n      [4, 24, 52, 80, 108, 136, 164],\n    ],\n    [\n      [28, 30, 30, 30],\n      [49, 25, 81, 68],\n      [4, 28, 56, 84, 112, 140, 168],\n    ],\n  ];\n  var MODE_TERMINATOR = 0;\n  var MODE_OCTET = 4;\n  var GF256_MAP: number[] = [],\n    GF256_INVMAP = [-1];\n  for (var i = 0, v = 1; i < 255; ++i) {\n    GF256_MAP.push(v);\n    GF256_INVMAP[v] = i;\n    v = (v * 2) ^ (v >= 128 ? 0x11d : 0);\n  }\n  var GF256_GENPOLY: number[][] = [[]];\n  for (var i = 0; i < 30; ++i) {\n    var prevpoly = GF256_GENPOLY[i],\n      poly: number[] = [];\n    for (var j = 0; j <= i; ++j) {\n      var a = j < i ? GF256_MAP[prevpoly[j]] : 0;\n      var b = GF256_MAP[(i + (prevpoly[j - 1] || 0)) % 255];\n      poly.push(GF256_INVMAP[a ^ b]);\n    }\n    GF256_GENPOLY.push(poly);\n  }\n  var ALPHANUMERIC_MAP: Record<string, number> = {};\n  for (var i = 0; i < 45; ++i) {\n    ALPHANUMERIC_MAP[\n      \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\".charAt(i)\n    ] = i;\n  }\n  var needsverinfo = function (ver: number) {\n    return ver > 6;\n  };\n  var getsizebyver = function (ver: number) {\n    return 4 * ver + 17;\n  };\n  var nfullbits = function (ver: number) {\n    var v = VERSIONS[ver];\n    var nbits = 16 * ver * ver + 128 * ver + 64;\n    if (needsverinfo(ver)) {\n      nbits -= 36;\n    }\n    if (v[2].length) {\n      nbits -= 25 * v[2].length * v[2].length - 10 * v[2].length - 55;\n    }\n    return nbits;\n  };\n  var ndatabits = function (ver: number) {\n    var nbits = nfullbits(ver) & ~7;\n    var v = VERSIONS[ver];\n    nbits -= 8 * v[0][1] * v[1][1];\n    return nbits;\n  };\n  var ndatalenbits = (ver: number) => (ver < 10 ? 8 : 16);\n\n  var getmaxdatalen = function (ver: number) {\n    var nbits = ndatabits(ver) - 4 - ndatalenbits(ver);\n    return (nbits / 8) | 0;\n  };\n\n  var encode = function (\n    ver: number,\n    mode: number,\n    data: number[],\n    maxbuflen: number\n  ) {\n    var buf = [];\n    var bits = 0,\n      remaining = 8;\n    var datalen = data.length;\n    var pack = function (x: number, n: number) {\n      if (n >= remaining) {\n        buf.push(bits | (x >> (n -= remaining)));\n        while (n >= 8) {\n          buf.push((x >> (n -= 8)) & 255);\n        }\n        bits = 0;\n        remaining = 8;\n      }\n      if (n > 0) {\n        bits |= (x & ((1 << n) - 1)) << (remaining -= n);\n      }\n    };\n    var nlenbits = ndatalenbits(ver);\n    pack(mode, 4);\n    pack(datalen, nlenbits);\n    for (var i = 0; i < datalen; ++i) {\n      pack(data[i], 8);\n    }\n    pack(MODE_TERMINATOR, 4);\n    if (remaining < 8) {\n      buf.push(bits);\n    }\n    while (buf.length + 1 < maxbuflen) {\n      buf.push(0xec, 0x11);\n    }\n    if (buf.length < maxbuflen) {\n      buf.push(0xec);\n    }\n    return buf;\n  };\n  var calculateecc = function (poly: number[], genpoly: number[]) {\n    var modulus = poly.slice(0);\n    var polylen = poly.length,\n      genpolylen = genpoly.length;\n    for (var k = 0; k < genpolylen; ++k) {\n      modulus.push(0);\n    }\n    for (var i = 0; i < polylen; ) {\n      var quotient = GF256_INVMAP[modulus[i++]];\n      if (quotient >= 0) {\n        for (var j = 0; j < genpolylen; ++j) {\n          modulus[i + j] ^= GF256_MAP[(quotient + genpoly[j]) % 255];\n        }\n      }\n    }\n    return modulus.slice(polylen);\n  };\n  var augumenteccs = function (\n    poly: number[],\n    nblocks: number,\n    genpoly: number[]\n  ) {\n    var subsizes = [];\n    var subsize = (poly.length / nblocks) | 0,\n      subsize0 = 0;\n    var pivot = nblocks - (poly.length % nblocks);\n    for (var i = 0; i < pivot; ++i) {\n      subsizes.push(subsize0);\n      subsize0 += subsize;\n    }\n    for (var i = pivot; i < nblocks; ++i) {\n      subsizes.push(subsize0);\n      subsize0 += subsize + 1;\n    }\n    subsizes.push(subsize0);\n    var eccs = [];\n    for (var i = 0; i < nblocks; ++i) {\n      eccs.push(\n        calculateecc(poly.slice(subsizes[i], subsizes[i + 1]), genpoly)\n      );\n    }\n    var result = [];\n    var nitemsperblock = (poly.length / nblocks) | 0;\n    for (var i = 0; i < nitemsperblock; ++i) {\n      for (var j = 0; j < nblocks; ++j) {\n        result.push(poly[subsizes[j] + i]);\n      }\n    }\n    for (var j = pivot; j < nblocks; ++j) {\n      result.push(poly[subsizes[j + 1] - 1]);\n    }\n    for (var i = 0; i < genpoly.length; ++i) {\n      for (var j = 0; j < nblocks; ++j) {\n        result.push(eccs[j][i]);\n      }\n    }\n    return result;\n  };\n  var augumentbch = function (\n    poly: number,\n    p: number,\n    genpoly: number,\n    q: number\n  ) {\n    var modulus = poly << q;\n    for (var i = p - 1; i >= 0; --i) {\n      if ((modulus >> (q + i)) & 1) {\n        modulus ^= genpoly << i;\n      }\n    }\n    return (poly << q) | modulus;\n  };\n  var makebasematrix = function (ver: number) {\n    var v = VERSIONS[ver],\n      n = getsizebyver(ver);\n    var matrix: number[][] = [],\n      reserved: number[][] = [];\n    for (var i = 0; i < n; ++i) {\n      matrix.push([]);\n      reserved.push([]);\n    }\n    var blit = function (\n      y: number,\n      x: number,\n      h: number,\n      w: number,\n      bits: number[]\n    ) {\n      for (var i = 0; i < h; ++i) {\n        for (var j = 0; j < w; ++j) {\n          matrix[y + i][x + j] = (bits[i] >> j) & 1;\n          reserved[y + i][x + j] = 1;\n        }\n      }\n    };\n    blit(0, 0, 9, 9, [0x7f, 0x41, 0x5d, 0x5d, 0x5d, 0x41, 0x17f, 0x00, 0x40]);\n    blit(n - 8, 0, 8, 9, [0x100, 0x7f, 0x41, 0x5d, 0x5d, 0x5d, 0x41, 0x7f]);\n    blit(\n      0,\n      n - 8,\n      9,\n      8,\n      [0xfe, 0x82, 0xba, 0xba, 0xba, 0x82, 0xfe, 0x00, 0x00]\n    );\n    for (var i = 9; i < n - 8; ++i) {\n      matrix[6][i] = matrix[i][6] = ~i & 1;\n      reserved[6][i] = reserved[i][6] = 1;\n    }\n    var aligns = v[2],\n      m = aligns.length;\n    for (var i = 0; i < m; ++i) {\n      var minj = i === 0 || i === m - 1 ? 1 : 0,\n        maxj = i === 0 ? m - 1 : m;\n      for (var j = minj; j < maxj; ++j) {\n        blit(aligns[i], aligns[j], 5, 5, [0x1f, 0x11, 0x15, 0x11, 0x1f]);\n      }\n    }\n    if (needsverinfo(ver)) {\n      var code = augumentbch(ver, 6, 0x1f25, 12);\n      var k = 0;\n      for (var i = 0; i < 6; ++i) {\n        for (var j = 0; j < 3; ++j) {\n          matrix[i][n - 11 + j] = matrix[n - 11 + j][i] = (code >> k++) & 1;\n          reserved[i][n - 11 + j] = reserved[n - 11 + j][i] = 1;\n        }\n      }\n    }\n    return {\n      matrix: matrix,\n      reserved: reserved,\n    };\n  };\n  var putdata = function (\n    matrix: number[][],\n    reserved: number[][],\n    buf: number[]\n  ) {\n    var n = matrix.length;\n    var k = 0,\n      dir = -1;\n    for (var i = n - 1; i >= 0; i -= 2) {\n      if (i === 6) {\n        --i;\n      }\n      var jj = dir < 0 ? n - 1 : 0;\n      for (var j = 0; j < n; ++j) {\n        for (var ii = i; ii > i - 2; --ii) {\n          if (!reserved[jj][ii]) {\n            matrix[jj][ii] = (buf[k >> 3] >> (~k & 7)) & 1;\n            ++k;\n          }\n        }\n        jj += dir;\n      }\n      dir = -dir;\n    }\n    return matrix;\n  };\n  var maskdata = function (matrix: number[][], reserved: number[][]) {\n    var maskf = (i: number, j: number) => (i + j) % 2 === 0;\n    var n = matrix.length;\n    for (var i = 0; i < n; ++i) {\n      for (var j = 0; j < n; ++j) {\n        if (!reserved[i][j]) {\n          //@ts-ignore\n          matrix[i][j] ^= maskf(i, j);\n        }\n      }\n    }\n    return matrix;\n  };\n  var putformatinfo = function (matrix: number[][], ecclevel: number) {\n    var n = matrix.length;\n    var code = augumentbch((ecclevel << 3) | 0, 5, 0x537, 10) ^ 0x5412;\n    for (var i = 0; i < 15; ++i) {\n      var r = [\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        7,\n        8,\n        n - 7,\n        n - 6,\n        n - 5,\n        n - 4,\n        n - 3,\n        n - 2,\n        n - 1,\n      ][i];\n      var c = [\n        n - 1,\n        n - 2,\n        n - 3,\n        n - 4,\n        n - 5,\n        n - 6,\n        n - 7,\n        n - 8,\n        7,\n        5,\n        4,\n        3,\n        2,\n        1,\n        0,\n      ][i];\n      matrix[r][8] = matrix[8][c] = (code >> i) & 1;\n    }\n    return matrix;\n  };\n  var generate = function (data: number[], ver: number) {\n    var v = VERSIONS[ver];\n    var buf = encode(ver, MODE_OCTET, data, ndatabits(ver) >> 3);\n    buf = augumenteccs(buf, v[1][1], GF256_GENPOLY[v[0][1]]);\n    var result = makebasematrix(ver);\n    var matrix = result.matrix,\n      reserved = result.reserved;\n    putdata(matrix, reserved, buf);\n    maskdata(matrix, reserved);\n    putformatinfo(matrix, 1);\n    return matrix;\n  };\n  var QRCode = {\n    generate: function (source: string) {\n      const data = new TextEncoder().encode(source);\n      let ver = 1;\n      for (ver = 1; ver <= 40; ++ver) {\n        if (data.length <= getmaxdatalen(ver)) {\n          break;\n        }\n      }\n      //@ts-ignore UINtarray is fine\n      return generate(data, ver);\n    },\n    writeToCanvas: function (\n      source: string,\n      canvas: HTMLCanvasElement,\n      {\n        fillColor = \"#FFFFFF\",\n        textColor = \"#000000\",\n        margin = 1.5,\n        modSize = 10,\n      } = {}\n    ) {\n      var matrix = QRCode[\"generate\"](source);\n      var n = matrix.length;\n      var size = modSize * (n + 2 * margin);\n      canvas.width = canvas.height = size;\n      const context = canvas.getContext(\"2d\");\n      if (context == null) {\n        throw new Error(\"Could not get context from canvas\");\n      }\n      context.fillStyle = fillColor;\n      context.fillRect(0, 0, size, size);\n      context.fillStyle = textColor;\n      context.imageSmoothingEnabled = false;\n      for (var i = 0; i < n; ++i) {\n        for (var j = 0; j < n; ++j) {\n          if (matrix[i][j]) {\n            context.fillRect(\n              modSize * (margin + j),\n              modSize * (margin + i),\n              modSize,\n              modSize\n            );\n          }\n        }\n      }\n    },\n  };\n  return QRCode;\n}\n","import QR from \"../qr\";\nimport React, { useEffect, useRef } from \"react\";\ntype Props = {\n  style?: React.CSSProperties;\n  colorScheme?: \"onDarkBg\" | \"onWhiteBg\";\n  padding?: number;\n  children: string;\n};\n\nexport default function QrCode({ children, style }: Props) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  useEffect(() => {\n    canvasRef.current &&\n      children &&\n      QR().writeToCanvas(children, canvasRef.current);\n  }, [canvasRef.current, children]);\n  return <canvas style={style} ref={canvasRef} />;\n}\n","import React, { CSSProperties, useEffect, useState } from \"react\";\nimport Layout from \"./Layout\";\nimport QrCode from \"./QrCode\";\n\ntype Props = {\n  url: string;\n  players: { id: string; name: string; color: string; ready: boolean }[];\n};\n\nconst verticalFlex: CSSProperties = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  alignItems: \"start\",\n};\n\nexport default function Waiting({ url, players }: Props) {\n  return (\n    <Layout style={{ justifyContent: \"space-around\" }}>\n      <div />\n      <div\n        style={{\n          width: \"40%\",\n        }}\n      >\n        <QrCode\n          colorScheme=\"onWhiteBg\"\n          padding={2}\n          style={{\n            width: \"100%\",\n            margin: \"0 auto 2em auto\",\n          }}\n        >\n          {url}\n        </QrCode>\n        <a\n          href={url}\n          style={{\n            textAlign: \"center\",\n            display: \"block\",\n            fontSize: \"0.8em\",\n            marginTop: \"0.8em\",\n            alignSelf: \"center\",\n          }}\n        >\n          {url}\n        </a>\n      </div>\n      <div\n        style={{\n          ...verticalFlex,\n          width: 0,\n          flexGrow: players.length ? 0.5 : 0,\n          transition: \"flex-grow 500ms ease-in\",\n        }}\n      >\n        {players.map((player) => (\n          <PlayerItem key={player.id} {...player} />\n        ))}\n      </div>\n    </Layout>\n  );\n}\n\nconst PlayerItem = (player: Props[\"players\"][0]) => {\n  const [rendered, setRendered] = useState(false);\n  useEffect(() => {\n    window.setTimeout(() => setRendered(true), 100);\n  }, []);\n  return (\n    <div\n      style={{\n        opacity: rendered ? 1 : 0,\n        margin: \"1.2em 0\",\n        transition: \"transform 150ms ease-in, opacity 150ms ease-in\",\n        transform: player.ready ? \"scale(1.1) translateX(5%)\" : undefined,\n        animation: \"fadeIn 250ms ease-in, fromRight 500ms ease-in\",\n        minWidth: \"7em\",\n      }}\n      key={player.id}\n    >\n      <h2\n        style={{\n          color: player.color,\n          fontSize: \"3em\",\n          transition: \"color 150ms\",\n          whiteSpace: \"nowrap\",\n        }}\n      >\n        {player.name} {player.ready ? <small>👍</small> : \"  \"}\n      </h2>\n    </div>\n  );\n};\n","import { useMemo, useState, useEffect } from \"react\";\n\nexport default function useLocalStorage<T>(\n  localStorageKey: string,\n  defaultValue: T\n) {\n  //Memo localstorage and json parse, could be expensive in browser\n  const startingValue = useMemo(\n    () =>\n      localStorage?.[localStorageKey]\n        ? JSON.parse(localStorage[localStorageKey])\n        : defaultValue,\n    []\n  );\n  const [state, setState] = useState<T>(startingValue);\n  useEffect(() => {\n    localStorage && (localStorage[localStorageKey] = JSON.stringify(state));\n  }, [state]);\n  return [state, setState] as const;\n}\n","import React, {\n  createContext,\n  SetStateAction,\n  Dispatch,\n  PropsWithChildren,\n} from \"react\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\n\nconst defaultSettings = {\n  snakeSpeed: 3.3,\n  lineWidth: 8,\n  turnRadius: 0.05,\n  startPositionSpread: 0.5,\n  startingHoleChancePercantage: -5,\n  holeDuration: 10,\n  maxVerticalResolution: 1080,\n};\n\nexport type GameSettings = typeof defaultSettings;\n\nexport const GameSettingsContext = createContext([\n  defaultSettings,\n  (() => {}) as Dispatch<SetStateAction<GameSettings>>,\n] as const);\n\nexport function GameSettingsProvider({ children }: PropsWithChildren<{}>) {\n  const state = useLocalStorage(\"gameSettings\", defaultSettings);\n  return (\n    <GameSettingsContext.Provider value={state}>\n      {children}\n    </GameSettingsContext.Provider>\n  );\n}\n","import React from \"react\";\nimport { ALL_COLORS } from \"../constants\";\nimport { LobbyPlayer } from \"../hooks/useStateForLobby\";\nimport QrCode from \"./QrCode\";\n\nexport default function Scoreboard({\n  players,\n  url,\n}: {\n  players: LobbyPlayer[];\n  url: string;\n}) {\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        zIndex: -1,\n        right: 0,\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        height: \"100%\",\n      }}\n    >\n      <div\n        style={{\n          flexGrow: 1,\n          display: \"flex\",\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n          alignItems: \"flex-end\",\n        }}\n      >\n        {players.map((player) => (\n          <div\n            key={player.id}\n            style={{\n              color: player.color,\n              textAlign: \"right\",\n              margin: \"0 1.5em\",\n              paddingBottom: \"2em\",\n            }}\n          >\n            <div style={{ fontSize: \"5.2em\" }}>{player.score}</div>\n            <div style={{ fontSize: \"1.2em\", whiteSpace: \"nowrap\" }}>\n              {player.name}\n            </div>\n          </div>\n        ))}\n      </div>\n      {ALL_COLORS.length > players.length && (\n        <QrCode\n          colorScheme=\"onWhiteBg\"\n          padding={2}\n          style={{\n            width: 150,\n            height: 150,\n            margin: \"2em\",\n          }}\n        >\n          {url}\n        </QrCode>\n      )}\n    </div>\n  );\n}\n","import React, { useEffect, useState, useMemo } from \"react\";\nimport useLobbyConnection from \"../hooks/useConnectionForLobby\";\nimport useStateForLobby, { LobbyPlayer } from \"../hooks/useStateForLobby\";\nimport Banger from \"./Banger\";\nimport GameRound from \"./GameRound\";\nimport Layout from \"./Layout\";\nimport Waiting from \"./Waiting\";\nimport { GameSettingsProvider } from \"./GameSettingsContext\";\nimport Scoreboard from \"./Scoreboard\";\n\ntype PlayerInfo = Pick<LobbyPlayer, \"color\" | \"name\">;\n\ntype GameState =\n  | { type: \"lobby\" }\n  | {\n      type: \"intermission\";\n      roundWinner?: PlayerInfo;\n      gameWinner?: PlayerInfo;\n      remainingTime: number;\n    }\n  | { type: \"playing\"; running: boolean; joinedPlayerIds: string[] };\n\nconst createIntermission = (\n  roundWinner?: PlayerInfo,\n  gameWinner?: PlayerInfo\n): GameState => ({\n  type: \"intermission\",\n  remainingTime: 5,\n  roundWinner,\n  gameWinner,\n});\n\nexport default function Lobby({ lobbyName }: { lobbyName: string }) {\n  const [socketStatus, connections] = useLobbyConnection(lobbyName);\n  const [players, gameState] = useStateForLobby(connections);\n  if (socketStatus === \"connecting\") {\n    return (\n      <Banger style={{ animation: \"fadeIn 300ms 750ms both\" }}>\n        Signaling server is <span style={{ color: \"yellow\" }}>warming</span> up.{\" \"}\n        <br />\n        <small style={{ fontSize: \"0.5em\" }}>\n          This will take a while <br /> (free tier hosting)\n        </small>\n      </Banger>\n    );\n  }\n  if (socketStatus === \"failed\") {\n    return (\n      <Banger>\n        Signaling server connection <span style={{ color: \"red\" }}>failed</span>{\" \"}\n      </Banger>\n    );\n  }\n  return (\n    <GameSettingsProvider>\n      <Game\n        lobbyName={lobbyName}\n        players={players}\n        allowSinglePlayer={gameState.allowSinglePlayer}\n      />\n    </GameSettingsProvider>\n  );\n}\n\nexport function Game({\n  lobbyName,\n  allowSinglePlayer = false,\n  players,\n}: {\n  lobbyName: string;\n  players: LobbyPlayer[];\n  allowSinglePlayer: boolean;\n}) {\n  const [gameState, setGameState] = useState<GameState>({ type: \"lobby\" });\n\n  const winningScore = useMemo(\n    () => (players.length || 1) * 5,\n    [players.length]\n  );\n\n  //Tick down intermissions to next round\n  useEffect(() => {\n    if (gameState.type !== \"intermission\") {\n      return;\n    }\n    if (gameState.remainingTime) {\n      const timeout = setTimeout(() => {\n        setGameState({\n          ...gameState,\n          remainingTime: gameState.remainingTime - 1,\n        });\n        return () => clearTimeout(timeout);\n      }, 1000);\n    } else {\n      //Start next round\n      setGameState({\n        type: \"playing\",\n        running: true,\n        joinedPlayerIds: players\n          .filter((player) => player.ready)\n          .map((player) => {\n            player.setState(\"playing\");\n            return player.id;\n          }),\n      });\n    }\n  }, [gameState]);\n\n  //Player join effect\n  useEffect(() => {\n    //if all players ready when in lobby, start game\n    if (\n      gameState.type === \"lobby\" &&\n      players.length &&\n      (players.length > 1 || allowSinglePlayer) &&\n      players.every((player) => player.ready)\n    ) {\n      setGameState(createIntermission());\n    }\n    //Go back to lobby, if no ready players are joined.\n    if (gameState.type !== \"lobby\" && !players.some((player) => player.ready)) {\n      setGameState({ type: \"lobby\" });\n    }\n  }, [players, gameState.type]);\n\n  //Group all joined and alive players\n  const playersInGame = useMemo(() => {\n    if (gameState.type !== \"playing\") {\n      return null;\n    }\n    const joined = players.filter((player) =>\n      gameState.joinedPlayerIds.includes(player.id)\n    );\n    return {\n      joined,\n      alive: joined.filter((otherPlayer) => otherPlayer.state === \"playing\"),\n    };\n  }, [gameState.type, players]);\n\n  //Finish ongoing round if someone won or no ones alive or playing\n  useEffect(() => {\n    if (!playersInGame) {\n      return;\n    }\n    const aliveCount = playersInGame.alive.length;\n    //Allow one player to skrrrt around without declaring them victor.\n    const isOneAliveButSinglePlayer =\n      aliveCount === 1 && playersInGame.joined.length === 1;\n    if (aliveCount <= 1 && !isOneAliveButSinglePlayer) {\n      //We have a winner!\n      setGameState((state) => ({ ...state, running: false }));\n      const playerWithMaxScore = playersInGame.joined.reduce(\n        (maxPlayer, player) =>\n          player.score > (maxPlayer?.score ?? 0) ? player : maxPlayer,\n        null as LobbyPlayer | null\n      );\n      window.setTimeout(() => {\n        setGameState((state) =>\n          state.type === \"playing\"\n            ? createIntermission(\n                playersInGame.alive[0] ?? { color: \"inherit\", name: \"Nobody\" },\n                (playerWithMaxScore?.score ?? 0) > winningScore\n                  ? (playerWithMaxScore as LobbyPlayer)\n                  : undefined\n              )\n            : state\n        );\n      }, 1000);\n    }\n  }, [playersInGame]);\n\n  //When someone crashes, set state to that player as crashed and give everyone else a score.\n  const onSnakeDeath = (player: LobbyPlayer) => {\n    if (playersInGame == null) {\n      return;\n    }\n    player.setState(\"dead\");\n    playersInGame.alive\n      .filter((p) => p.id !== player.id)\n      .forEach((otherPlayer) => otherPlayer.setScore(otherPlayer.score + 1));\n  };\n\n  //Create new input for game when players changes.\n  const gameInput = useMemo(\n    () =>\n      gameState.type === \"playing\"\n        ? players\n            .filter((player) => gameState.joinedPlayerIds.includes(player.id))\n            .map((player) => ({\n              id: player.id,\n              color: player.color,\n              onCollision: () => onSnakeDeath(player),\n              onTurnInput: player.onTurnInput,\n            }))\n        : [],\n    [gameState.type, players]\n  );\n\n  const url = `${window.location.protocol}//${window.location.host}${window.location.pathname}#${lobbyName}`;\n  switch (gameState.type) {\n    case \"lobby\": {\n      return <Waiting players={players} url={url} />;\n    }\n    case \"playing\": {\n      return (\n        <Layout>\n          <GameRound input={gameInput} run={gameState.running} />\n          <Scoreboard players={players} url={url} />\n        </Layout>\n      );\n    }\n    case \"intermission\": {\n      const intermissionMessage =\n        gameState.gameWinner != null ? (\n          <Banger>\n            <span style={{ color: gameState.gameWinner.color }}>\n              {gameState.gameWinner.name}\n            </span>{\" \"}\n            wins the game!\n          </Banger>\n        ) : gameState.remainingTime <= 3 ? (\n          <Banger key=\"countdown\">\n            {gameState.roundWinner ? \"Next round\" : \"Game starts\"} in{\" \"}\n            <span style={{ width: \"1em\", display: \"inline-block\" }}>\n              {gameState.remainingTime}\n            </span>\n          </Banger>\n        ) : gameState.roundWinner ? (\n          <Banger>\n            <span\n              style={{\n                color: gameState.roundWinner.color,\n              }}\n            >\n              {gameState.roundWinner.name}\n            </span>{\" \"}\n            survives\n          </Banger>\n        ) : (\n          <Banger>Get ready</Banger>\n        );\n      return (\n        <Layout key={gameState.remainingTime > 3 ? \"message\" : \"countdown\"}>\n          {intermissionMessage}\n        </Layout>\n      );\n    }\n  }\n}\n"],"names":["useLobbyConnection","lobbyName","clientConnections","setClientConnections","useState","socket","useJsonWebsocket","SIGNALING_URL","removeStaleConnection","useCallback","staleConnection","connections","acc","key","_a","err","useEffect","offerFrom","data","clientConnection","DEFAULT_RTC_PEER_CONFIG","event","unbindPeerSignaling","candidateFrom","closeConnection","channel","createMessageChannelToPlayer","localDescription","playerConnections","useMemo","value","useEffectWithDeps","effect","deps","dependencyRef","useRef","prevDeps","getColorAvailability","assignedColors","ALL_COLORS","color","useStateForLobby","createPlayerModifier","playerKey","fn","setPlayerState","player","otherPlayers","playerStates","gameState","setGameState","prevConnections","connectionKeys","disconnectingPlayers","id","disconnectId","_removePlayer","updatedColorAvailability","queuespot","connectedPlayers","connKey","index","prevPlayerState","modifyPlayer","playerState","assignedColor","_color","avail","state","score","turner","currentConnection","bindMessageToStateKey","eventName","modifier","keyName","old","prevClientConnections","prevPlayerStates","newState","oldState","_b","extractObjectDiff","prevGameState","stateUpdate","currentConn","messagesToTracker","jsonConverter","messagesFromTracker","stringConverter","createWebWorkerMessageChannel","worker","sends","recieves","setupMessageChannel","receive","listener","ev","frameTimeSixtyFps","snakeGameContext","canvas","snakeSpeed","lineWidth","turnRadius","startPositionSpread","startingHoleChancePercantage","holeDuration","maxVerticalResolution","checkCollisions","useTrackingCollisionCanvas","context","inlineThrow","scaleFactor","createNewSnake","input","snakes","inputSnakeData","snake","turn","moveSnake","turnAngle","checkCollision","prevCompOp","trackers","addTrackingChannel","interval","reportsCollisions","collisionCanvasWorker","CollisionTrackerWorker","collisionTracker","stopped","run","timeStamp","collisionCheckOdd","drawFrame","now","frameTimeOffset","frameTimeSnakeSpeed","frameTimeTurnRadius","tracker","positionData","stop","canvasStyle","GameRound","children","canvasRef","setCanvas","createSnakeCanvas","snakeInput","React","contextOptions","gameContext","QR","VERSIONS","MODE_TERMINATOR","MODE_OCTET","GF256_MAP","GF256_INVMAP","i","v","GF256_GENPOLY","prevpoly","poly","j","a","b","needsverinfo","ver","getsizebyver","nfullbits","nbits","ndatabits","ndatalenbits","getmaxdatalen","encode","mode","maxbuflen","buf","bits","remaining","datalen","pack","x","n","nlenbits","calculateecc","genpoly","modulus","polylen","genpolylen","k","quotient","augumenteccs","nblocks","subsizes","subsize","subsize0","pivot","eccs","result","nitemsperblock","augumentbch","p","q","makebasematrix","matrix","reserved","blit","y","h","w","aligns","m","minj","maxj","code","putdata","dir","jj","ii","maskdata","maskf","putformatinfo","ecclevel","r","c","generate","QRCode","source","fillColor","textColor","margin","modSize","size","QrCode","style","verticalFlex","Waiting","url","players","Layout","PlayerItem","rendered","setRendered","useLocalStorage","localStorageKey","defaultValue","startingValue","setState","defaultSettings","GameSettingsContext","createContext","GameSettingsProvider","Scoreboard","createIntermission","roundWinner","gameWinner","Lobby","socketStatus","Banger","Game","allowSinglePlayer","winningScore","timeout","playersInGame","joined","otherPlayer","aliveCount","isOneAliveButSinglePlayer","playerWithMaxScore","maxPlayer","onSnakeDeath","gameInput","intermissionMessage"],"mappings":"qNAYA,SAAwBA,GAAmBC,EAAmB,CAC5D,KAAM,CAACC,EAAmBC,CAAoB,EAAIC,EAE/C,CAAE,CAAA,EAECC,EAASC,GAAiB,GAAGC,MAAiBN,GAAW,EAEzDO,EAAwBC,GAC3BC,GAAuC,CACtCP,EAAsBQ,GACpB,OAAO,KAAKA,CAAW,EAAE,OAAO,CAACC,EAAKC,IAAQ,OAC5C,KAAIC,EAAAH,EAAYE,CAAG,IAAf,YAAAC,EAAmB,MAAOJ,EACxBE,EAAAC,CAAG,EAAIF,EAAYE,CAAG,MAEtB,IAAA,CACFF,EAAYE,CAAG,EAAE,CAAC,EAAE,QAAQ,QACrBE,GACC,QAAA,MAAM,qCAAsCA,CAAG,CACzD,CAEK,OAAAH,CACT,EAAG,EAA8B,CAAA,CAErC,EACA,CAACT,CAAoB,CAAA,EAGvBa,EAAU,IACJX,EAAO,SAAW,YACpB,OAG2BA,EAAO,YAClC,MAAO,CAAE,KAAMY,EAAW,KAAAC,KAAW,CACnC,GAAIA,EAAK,OAAS,SAAWD,GAAa,KACxC,OAEI,MAAAE,EAAmB,IAAI,kBAAkBC,EAAuB,EAEtED,EAAiB,eAAkBE,GACjCA,EAAM,WAAa,MACnBhB,EAAO,KAAK,CACV,GAAIY,EACJ,KAAMI,EAAM,UAAU,OAAO,CAAA,CAC9B,EACH,MAAMC,EAAsBjB,EAAO,YACjC,CAAC,CAAE,KAAMkB,EAAe,KAAAL,CAAAA,IACtBK,IAAkBN,GAClB,cAAeC,GACfC,EAAiB,gBAAgBD,CAAI,CAAA,EAEnCM,EAAkB,IAAM,CACNF,GAAA,MAAAA,IACtBd,EAAsBW,CAAgB,CAAA,EAExCA,EAAiB,cAAgB,CAAC,CAAE,QAAAM,KAAmC,CACrEA,EAAQ,QAAUD,EAClBrB,EAAsBQ,IAAiB,CACrC,GAAGA,EACH,CAACM,CAAS,EAAG,CACXE,EACAO,GAA6BP,EAAkBM,CAAO,CACxD,CACA,EAAA,CAAA,EAEJN,EAAiB,wBAA0B,IAAM,CACjCA,EAAiB,iBAClB,gBACKK,GAClB,EAEF,MAAML,EAAiB,qBACrB,IAAI,sBAAsBD,CAAI,CAAA,EAE1B,MAAAS,EAAmB,MAAMR,EAAiB,eAC1C,MAAAA,EAAiB,oBAAoBQ,CAAgB,EAC3DtB,EAAO,KAAK,CAAE,KAAMsB,EAAkB,GAAIV,EAAW,CACvD,CAAA,EAGD,CAACZ,CAAM,CAAC,EAEX,MAAMuB,EAAoBC,EACxB,IACE,OAAO,QAAQ3B,CAAiB,EAAE,OAAO,CAACU,EAAK,CAACC,EAAKiB,CAAK,KACpDlB,EAAAC,CAAG,EAAIiB,EAAM,CAAC,EACXlB,GACN,EAAuB,EAC5B,CAACV,CAAiB,CAAA,EAGb,MAAA,CAACG,EAAO,OAAQuB,CAAiB,CAC1C,CCtGwB,SAAAG,EACtBC,EACAC,EACA,CACA,MAAMC,EAAgBC,IACtBnB,EAAU,IAAM,CACd,MAAMoB,EAAWF,EAAc,QAC/B,OAAAA,EAAc,QAAUD,EACjBD,EAAOI,CAAQ,GACrBH,CAAI,CACT,CCUA,MAAMI,GAAuB,CAACC,EAA2B,KACvDC,GAAW,OAAO,CAAC3B,EAAK4B,KACtB5B,EAAI4B,CAAK,EAAIF,EAAe,QAAQE,CAAK,IAAM,GACxC5B,GACN,CAAkC,CAAA,EAKvC,SAAwB6B,GAAiBvC,EAAsC,CAC7E,MAAMwC,EACHC,GAAuBC,GACtBC,EAAe,CAAC,CAAE,CAACF,GAAYG,EAAQ,GAAGC,MAAoB,CAC5D,GAAGA,EACH,CAACJ,CAAS,EAAGC,EAAGE,CAAM,CACtB,EAAA,EAEA,CAACE,EAAcH,CAAc,EAAIzC,EAAuB,CAAE,CAAA,EAC1D,CAAC6C,EAAWC,CAAY,EAAI9C,EAAoB,CACpD,kBAAmBiC,GAAqB,EACxC,kBAAmB,EAAA,CACpB,EAGDN,EACGK,GAAa,CACZ,KAAM,CAACe,CAAe,EAAIf,GAAY,CAAC,CAAE,CAAA,EACzCS,EAAgBG,GAAiB,CACzB,MAAAI,EAAiB,OAAO,KAAKlD,CAAiB,EAE9CmD,EAAuB,OAAO,KAAKL,CAAY,EAClD,OAAQM,GAAO,CAACF,EAAe,SAASE,CAAE,CAAC,EAC3C,IAAKC,GAAiB,OACRP,qBAAAA,EAAAA,EAAaO,CAAY,IAAzBP,YAAAA,EAA4B,OAAO,EACzC,CACL,GAAGA,EAAaO,CAAY,EAC5B,QAAS,OAAO,WACd,IACEV,EACE,CAAC,CAAE,CAACU,GAAeC,EAAe,GAAGR,CACnCA,IAAAA,CACJ,EACF,GACF,CAAA,CAEH,CAAA,EACA,OAAO,CAACpC,EAAKkC,KACRlC,EAAAkC,EAAO,EAAE,EAAIA,EACVlC,GACN,CAAkB,CAAA,EAGnB,IAAA6C,EACAC,EAAY,EAChB,MAAMC,EAAmBP,EAAe,OACtC,CAACxC,EAAKgD,EAASC,IAAU,CACjB,MAAAC,EAAkBd,EAAaY,CAAO,EAC5C,aAAaE,GAAA,YAAAA,EAAiB,OAAO,EAC/B,MAAAC,EAAerB,EAAqBkB,CAAO,EAC7C,IAAAI,EACFF,IACC,IAAM,OACLL,EAA2BA,GAA4B,CACrD,GAAGR,EAAU,iBAAA,EAGf,MAAMgB,GAAgBnD,EAAA,OAAO,QAC3B2C,CAAA,EACA,KAAK,CAAC,CAACS,EAAQC,CAAK,IAAMA,CAAK,IAFX,YAAArD,EAEe,GACrC,GAAImD,GAAiB,KACnB,OAAAR,EAAyBQ,CAAa,EAAI,GACnC,CACL,GAAIL,EACJ,KAAM,UAAUC,EAAQ,IACxB,MAAOI,EACP,MAAO,GACP,MAAO,EACP,MAAO,UACP,QAAS,EAGT,SAAWG,GACTL,EAAcjB,IAAY,CAAE,GAAGA,EAAQ,MAAAsB,CAAA,EAAQ,EACjD,SAAWC,GACTN,EAAcjB,IAAY,CAAE,GAAGA,EAAQ,MAAAuB,CAAA,EAAQ,EACjD,YAAcC,UACZ,OAAAxD,EAAAZ,EAAkB0D,CAAO,IAAzB,YAAA9C,EAA4B,GAAG,OAAQwD,GAAM,CAEnD,KAGJ,GAAIN,GAAe,KACC,OAAA9D,EAAA0D,CAAO,EAAE,KAAK,MAAO,CACrC,OAAQ,YACR,UAAAF,CAAA,CACD,EACDA,IACO9C,EAGH,MAAA2D,EAAoBrE,EAAkB0D,CAAO,EACnD,GACEE,GAAmB,MACnBS,IAAsBpB,EAAgBS,CAAO,EAC7C,CACA,MAAMY,EAAwB,CAC5BC,EACAC,EACAC,IACG,CACeJ,EAAA,GAAGE,EAAYvD,GAC/BwD,EAAUE,IAAS,CAAE,GAAGA,EAAK,CAACD,CAAO,EAAGzD,CAAA,EAAO,CAAA,CACjD,EAEoBsD,EAAA,WAAYT,EAAc,OAAO,EACjCS,EAAA,UAAWT,EAAc,MAAM,EAC/BS,EAAA,WAAYT,EAAc,OAAO,EACvDS,EACE,oBACAtB,EACA,mBAAA,EAEYc,EAAA,CACZ,GAAGA,EACH,YAAcM,GAAWC,EAAkB,GAAG,OAAQD,CAAM,CAAA,EAGhE,OAAA1D,EAAIgD,CAAO,EAAII,EACRpD,CACT,EACA,CAAC,CAAA,EAEH,MAAO,CAAE,GAAGyC,EAAsB,GAAGM,EAAiB,CACvD,CACH,EACA,CAACzD,CAAiB,CAAA,EAIpB,MAAMoC,EAAiB,OAAO,OAAOU,CAAY,EAAE,IAChDF,GAAWA,EAAO,KAAA,EAErB9B,OAAAA,EAAU,IAAM,CACdkC,EAAcD,IAAe,CAC3B,GAAGA,EACH,kBAAmBZ,GAAqBC,CAAc,CACtD,EAAA,GACD,CAACA,EAAe,KAAK,GAAG,CAAC,CAAC,EAG7BP,EACGK,GAAa,CACZ,KAAM,CAACyC,EAAuBC,CAAgB,EAAI1C,GAAY,CAAA,EAC9D,OAAO,KAAKY,CAAY,EAAE,QAASnC,GAAQ,SACnC,MAAAkE,EAAW/B,EAAanC,CAAG,EAC3BmE,EAAWF,GAAA,YAAAA,EAAmBjE,GAGlCX,EAAkBW,CAAG,IAAKgE,GAAA,YAAAA,EAAwBhE,KAClDmE,GAAY,MAEZlE,EAAAZ,EAAkBW,CAAG,IAArB,MAAAC,EAAwB,KAAK,cAAeiE,GAGrCA,IAAaC,KACpBC,EAAA/E,EAAkBW,CAAG,IAArB,MAAAoE,EAAwB,KACtB,cACAC,GAAkBF,EAAUD,EAAU,UAAU,GAEpD,CACD,CACH,EACA,CAAC7E,EAAmB8C,CAAY,CAAA,EAIlCjB,EACGK,GAAa,CACZ,KAAM,CAACyC,EAAuBM,CAAa,EAAI/C,GAAY,CAAA,EACrDgD,EACJD,IAAkBlC,GAClBiC,GAAkBC,EAAelC,CAAS,EAC5C,OAAO,KAAK/C,CAAiB,EAAE,QAASoD,GAAO,CACvC,MAAA+B,EAAcnF,EAAkBoD,CAAE,EAEpC+B,IAAeR,GAAA,YAAAA,EAAwBvB,IAC5B+B,GAAA,MAAAA,EAAA,KAAK,YAAapC,GAGxBmC,IACMC,GAAA,MAAAA,EAAA,KAAK,YAAaD,GACjC,CACD,CACH,EACA,CAAClF,EAAmB+C,CAAS,CAAA,EAKxB,CAFSpB,EAAQ,IAAM,OAAO,OAAOmB,CAAY,EAAG,CAACA,CAAY,CAAC,EAExDC,CAAS,CAC5B,CC3NO,MAAMqC,GAAoB,CAC/B,WAAYC,GAMZ,aAAcA,EAGhB,EACaC,GAAsB,CACjC,gBAAiBC,EACnB,wFCZO,SAASC,GACdC,EACA,CACO,MAAA,CAILC,EACAC,IAEAC,GAAoB,CAClB,KAAMH,EAAO,YAAY,KAAKA,CAAM,EACpC,YAAYI,EAAS,CACnB,MAAMC,EAAYC,GAAYF,EAAQE,EAAG,IAAI,EACtC,OAAAN,EAAA,iBAAiB,UAAWK,CAAQ,EACpC,IAAML,EAAO,oBAAoB,UAAWK,CAAQ,CAC7D,CAAA,CACD,EAAEJ,EAAOC,CAAQ,CACtB,CCPA,MAAMK,GAAoB,IAAO,GAIjC,SAAwBC,GACtBC,EACA,CACE,WAAAC,EAAa,IACb,UAAAC,EAAY,EACZ,WAAAC,EAAa,IACb,oBAAAC,EAAsB,GACtB,6BAAAC,EAA+B,GAC/B,aAAAC,EAAe,GACf,sBAAAC,EAAwB,KACxB,gBAAAC,EAAkB,GAClB,2BAAAC,EAA6B,EAC/B,EAAI,GACJ,CACM,MAAAC,EACHV,EAAO,WAAW,KAAM,CACvB,eAAgB,GAChB,mBAAoB,EAAA,CACrB,GACDW,GAAY,uCAAuC,EAC/CC,EACJZ,EAAO,OAASO,EACZP,EAAO,OAASO,EAChB,EACEG,EAAA,MAAME,EAAaA,CAAW,EAEhC,MAAAC,EAAkBC,IAAuB,CAC7C,GAAGA,EACH,YAAa,GACb,KAAM,EACN,UAAW,KAAK,MAAM,KAAK,OAAA,EAAW,GAAG,EACzC,WAAYT,EACZ,SAAU,CACR,GACG,KAAK,SAAWD,IAChBM,EAAQ,OAAO,MAAQN,GAC1B,GACG,KAAK,SAAWA,IAChBM,EAAQ,OAAO,OAASN,EAC7B,EACA,mBAAoB,EACpB,SAAU,IAAA,GAGNW,EAA6D,CAAA,EAG7DC,EAAkBF,GAAsB,CACxC,IAAAG,EAAQF,EAAO,KAAME,GAAUA,EAAM,KAAOH,EAAM,EAAE,EACxD,OAAIG,GAAS,OACXA,EAAQJ,EAAeC,CAAK,EAC5BC,EAAO,KAAKE,CAAK,GAEXC,GAAiB,CACvBD,EAAO,KAAOC,CAAA,CAChB,EAIF,SAASC,EACPF,EACAhB,EACAmB,EACAC,EAAiB,GACjB,CACA,GAAIJ,EAAM,YACR,OA+BE,GA7BAA,EAAM,oBAAsB,IAC1BA,EAAM,WAAa,GAAK,KAAK,SAAW,IAAMA,EAAM,YACtDA,EAAM,mBAAqBX,EAC3BW,EAAM,WAAaZ,GAEbY,EAAA,WAAaA,EAAM,WAAa,IAKxCI,IACCJ,EAAM,SAAS,EAAI,GAClBA,EAAM,SAAS,EAAIjB,EAAO,OAC1BiB,EAAM,SAAS,EAAI,GACnBA,EAAM,SAAS,EAAIjB,EAAO,QAC1BU,EAAQ,aACNO,EAAM,SAAS,GACZhB,EAAaC,EAAY,GAAK,KAAK,IAAIe,EAAM,SAAS,EACzDA,EAAM,SAAS,GACZhB,EAAaC,EAAY,GAAK,KAAK,IAAIe,EAAM,SAAS,EACzD,EACA,CACF,EAAE,KAAK,CAAC,IAAM,KAGhBA,EAAM,YAAc,GACpBA,EAAM,YAAY,GAGhBA,EAAM,UAAY,KAAM,CAC1BP,EAAQ,UAAU,EAClBA,EAAQ,QAAU,SAClBA,EAAQ,UAAYR,EAAY,EAChC,MAAMoB,EAAaZ,EAAQ,yBAC3BA,EAAQ,yBAA2B,kBACnCA,EAAQ,OAAOO,EAAM,SAAS,EAAGA,EAAM,SAAS,CAAC,EACjDP,EAAQ,OAAOO,EAAM,SAAS,EAAGA,EAAM,SAAS,CAAC,EACjDP,EAAQ,OAAO,EACfA,EAAQ,UAAU,EAClBO,EAAM,SAAW,KACjBP,EAAQ,yBAA2BY,EAGjCL,EAAM,mBAAqB,IAC7BA,EAAM,SAAW,CAAE,GAAGA,EAAM,QAAS,EAC/BA,EAAA,sBAGRP,EAAQ,UAAU,EAClBA,EAAQ,QAAU,SAClBA,EAAQ,UAAYR,EACpBQ,EAAQ,YAAcO,EAAM,MAC5BP,EAAQ,OAAOO,EAAM,SAAS,EAAGA,EAAM,SAAS,CAAC,EAC3CA,EAAA,WAAaA,EAAM,KAAOG,EAChCH,EAAM,SAAS,GAAKhB,EAAa,KAAK,IAAIgB,EAAM,SAAS,EACzDA,EAAM,SAAS,GAAKhB,EAAa,KAAK,IAAIgB,EAAM,SAAS,EACzDP,EAAQ,OAAOO,EAAM,SAAS,EAAGA,EAAM,SAAS,CAAC,EACjDP,EAAQ,OAAO,EACfA,EAAQ,UAAU,CACpB,CAGA,MAAMa,EAIA,CAAA,EACG,SAAAC,EACPnG,EACAoG,EAEAC,EACA,CACArG,EAAQ,KAAK,aAAc,CACzB,MAAO2E,EAAO,MACd,OAAQA,EAAO,OACf,YAAAY,EACA,UAAAV,CAAA,CACD,EACDqB,EAAS,KAAK,CAAE,SAAAE,EAAU,QAAApG,EAAS,aAAc,EAAG,EACpDqG,GACErG,EAAQ,GAAG,kBAAoB6B,GAAO,CACpC,MAAM+D,EAAQF,EAAO,KAAME,GAAUA,EAAM,KAAO/D,CAAE,EAChD+D,IACFA,EAAM,YAAc,GACpBA,EAAM,YAAY,EACpB,CACD,CACL,CAGM,MAAAU,EACJlB,IACC,IAAM,CACCkB,MAAAA,EAAwB,IAAIC,GAClCD,EAAsB,YAAY,kBAAkB,EACpD,MAAME,EAAmBvC,GACvBqC,CAAA,EACAzC,GAAmBE,EAAmB,EACrB,OAAAoC,EAAAK,EAAkB,GAAI,EAAI,EACtCF,CAAA,KAGX,IAAIG,EAAU,GACd,SAASC,GAAM,CACT,IAAAC,EAAY,YAAY,MACxBC,EAAoB,GACxB,SAASC,EAAUC,EAAa,CAE9B,IAAIC,GADoBD,EAAMH,GACUlC,GAEtBsC,EAAAA,EAAkB,EAAIA,EAAkB,EAC1D,MAAMC,EAAsBpC,EAAamC,EACnCE,EAAsBnC,EAAaiC,EAC7BJ,EAAAG,EACZ,QAAS1E,EAAQ,EAAGA,EAAQsD,EAAO,OAAQtD,IACzC0D,EACEJ,EAAOtD,CAAK,EACZ4E,EACAC,EACA9B,GAAmB,CAAC,EAAE/C,EAAQ,KAAOwE,CAAA,EAGzCA,EAAoB,CAACA,EAErB,UAAWM,KAAWhB,EAAU,CAE9B,IAAIiB,EAAe,KACfL,EAAMI,EAAQ,cAAgBA,EAAQ,WACvBC,MAAAzB,EACd,OAAQE,GAAU,CAACA,EAAM,WAAW,EACpC,IAAKA,IAAW,CACf,GAAIA,EAAM,GACV,KAAMA,EAAM,mBAAqB,OAAYA,EAAM,MACnD,EAAGA,EAAM,SAAS,EAClB,EAAGA,EAAM,SAAS,CAClB,EAAA,GACIsB,EAAA,QAAQ,KAAK,eAAgBC,CAAY,GAGpD,CAAAV,GAAW,sBAAsBI,CAAS,CAC7C,CACIJ,IACQA,EAAA,GACV,sBAAsBI,CAAS,EAEnC,CACA,SAASO,GAAO,CACJX,EAAA,EACZ,CAEO,MAAA,CACL,IAAAC,EACA,KAAAU,EACA,eAAAzB,EACA,mBAAAQ,EACA,SAAU,CACRG,GAAyBA,EAAsB,YAC1Cc,GACP,CAAA,CAEJ,CC7OA,MAAMC,GAA6B,CACjC,SAAU,EACV,OAAQ,OACR,MAAO,MACT,EACA,SAAwBC,GAAU,CAAE,IAAAZ,EAAK,MAAAjB,EAAO,SAAA8B,GAAmB,CAC3D,MAAAC,EAAY9G,EAA0B,IAAI,EAC1C,CAACiE,EAAQ8C,CAAS,EAAI9I,EAE1B,EAEFY,OAAAA,EAAU,IAAM,CACV,GAAAiI,EAAU,SAAW,MAAQ7C,EACxB,MAAA,IACL8C,EAAW9C,GAAW,CACpBA,GAAAA,MAAAA,EAAQ,SACD,CACR,EAEL+C,GAAkBF,EAAU,OAAO,EAAE,KAAM7C,GAAW,CACpD8C,EAAU9C,CAAM,CAAA,CACjB,CAAA,EACA,CAAC6C,EAAU,OAAO,CAAC,EAEtBjI,EAAU,IAAM,CACd,GAAIoF,GAAU,KAGd,UAAWgD,KAAclC,EAAO,CACxB,MAAA5C,EAAS8B,EAAO,eAAegD,CAAU,EAC/CA,EAAW,YAAY9E,CAAM,EAC/B,EACC,CAAC8B,EAAQc,CAAK,CAAC,EAElBlG,EAAU,IAAM,CACVoF,GAAU,OAGd+B,EAAM/B,EAAO,IAAQ,EAAAA,EAAO,KAAK,EAAA,EAChC,CAACA,EAAQ+B,CAAG,CAAC,EAERkB,EAAA,cAAA,SAAA,CAAO,IAAKJ,EAAW,MAAOH,EAAa,CAAA,CACrD,CAEA,eAAeK,GACb/C,EACA,CACE,sBAAAO,EAAwB,KACxB,GAAG2C,CACL,EAEO,GACP,CAEAlD,EAAO,MAAM,OAAS,OACtBA,EAAO,MAAM,MAAQ,OACjBA,EAAO,aAAeO,GACxBP,EAAO,OAASO,EAChBP,EAAO,MACJO,EAAwBP,EAAO,aAAgBA,EAAO,cAEzDA,EAAO,OAASA,EAAO,aACvBA,EAAO,MAAQA,EAAO,aAIlB,MAAAmD,EAAc,MAAO,oBAAqB,OAG5CpD,IAAkBC,EAAQkD,CAAc,EAErC,MAAA,CACL,GAAGC,EACH,SAAU,CACRA,EAAY,QAAQ,CACtB,CAAA,CAEJ,CCtFA,SAAwBC,IAAK,CA4M3B,QA3MIC,EAAW,CACb,CAAC,EAAE,EACH,CAAC,CAAC,GAAI,EAAG,GAAI,EAAE,EAAG,CAAC,EAAG,EAAG,EAAG,CAAC,EAAG,CAAA,CAAE,EAClC,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,EAAG,EAAG,CAAC,EACX,CAAC,EAAG,EAAE,CACR,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,EAAG,EAAG,CAAC,EACX,CAAC,EAAG,EAAE,CACR,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,EAAG,EAAG,CAAC,EACX,CAAC,EAAG,EAAE,CACR,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,EAAG,EAAG,CAAC,EACX,CAAC,EAAG,EAAE,CACR,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,EAAG,EAAG,CAAC,EACX,CAAC,EAAG,EAAE,CACR,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,EAAG,EAAG,CAAC,EACX,CAAC,EAAG,GAAI,EAAE,CACZ,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,EAAG,EAAG,CAAC,EACX,CAAC,EAAG,GAAI,EAAE,CACZ,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,EAAG,EAAG,CAAC,EACX,CAAC,EAAG,GAAI,EAAE,CACZ,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,EAAG,EAAG,CAAC,EACX,CAAC,EAAG,GAAI,EAAE,CACZ,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,EAAG,GAAI,CAAC,EACZ,CAAC,EAAG,GAAI,EAAE,CACZ,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,EAAG,GAAI,EAAE,EACb,CAAC,EAAG,GAAI,EAAE,CACZ,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,EAAG,GAAI,EAAE,EACb,CAAC,EAAG,GAAI,EAAE,CACZ,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,EAAG,GAAI,EAAE,EACb,CAAC,EAAG,GAAI,GAAI,EAAE,CAChB,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,GAAI,EAAG,GAAI,EAAE,EACd,CAAC,EAAG,GAAI,GAAI,EAAE,CAChB,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,GAAI,EAAG,GAAI,EAAE,EACd,CAAC,EAAG,GAAI,GAAI,EAAE,CAChB,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,GAAI,EAAG,GAAI,EAAE,EACd,CAAC,EAAG,GAAI,GAAI,EAAE,CAChB,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,GAAI,EAAG,GAAI,EAAE,EACd,CAAC,EAAG,GAAI,GAAI,EAAE,CAChB,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,GAAI,EAAG,GAAI,EAAE,EACd,CAAC,EAAG,GAAI,GAAI,EAAE,CAChB,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,GAAI,EAAG,GAAI,EAAE,EACd,CAAC,EAAG,GAAI,GAAI,EAAE,CAChB,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,GAAI,EAAG,GAAI,EAAE,EACd,CAAC,EAAG,GAAI,GAAI,GAAI,EAAE,CACpB,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,GAAI,EAAG,GAAI,EAAE,EACd,CAAC,EAAG,GAAI,GAAI,GAAI,EAAE,CACpB,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,GAAI,EAAG,GAAI,EAAE,EACd,CAAC,EAAG,GAAI,GAAI,GAAI,GAAG,CACrB,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,GAAI,GAAI,GAAI,GAAG,CACrB,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,GAAI,GAAI,GAAI,GAAG,CACrB,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,GAAI,GAAI,GAAI,GAAG,CACrB,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,GAAI,GAAI,GAAI,GAAG,CACrB,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAG,CACzB,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,GAAG,CAC1B,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,GAAG,CAC1B,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,GAAG,CAC1B,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,GAAG,CAC1B,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,GAAG,CAC1B,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,GAAG,CAC1B,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,GAAG,CAC/B,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,GAAG,CAC/B,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,GAAG,CAC/B,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,GAAG,CAC/B,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,GAAG,CAC/B,EACA,CACE,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,GAAI,GAAI,GAAI,EAAE,EACf,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,GAAG,CAC/B,CAAA,EAEEC,EAAkB,EAClBC,EAAa,EACbC,EAAsB,CACxB,EAAAC,EAAe,CAAC,EAAE,EACXC,EAAI,EAAGC,EAAI,EAAGD,EAAI,IAAK,EAAEA,EAChCF,EAAU,KAAKG,CAAC,EAChBF,EAAaE,CAAC,EAAID,EAClBC,EAAKA,EAAI,GAAMA,GAAK,IAAM,IAAQ,GAGpC,QADIC,EAA4B,CAAC,CAAA,CAAE,EAC1BF,EAAI,EAAGA,EAAI,GAAI,EAAEA,EAAG,CAG3B,QAFIG,EAAWD,EAAcF,CAAC,EAC5BI,EAAiB,CAAA,EACVC,EAAI,EAAGA,GAAKL,EAAG,EAAEK,EAAG,CAC3B,IAAIC,EAAID,EAAIL,EAAIF,EAAUK,EAASE,CAAC,CAAC,EAAI,EACrCE,EAAIT,GAAWE,GAAKG,EAASE,EAAI,CAAC,GAAK,IAAM,GAAG,EACpDD,EAAK,KAAKL,EAAaO,EAAIC,CAAC,CAAC,EAE/BL,EAAc,KAAKE,CAAI,EAGzB,QAASJ,EAAI,EAAGA,EAAI,GAAI,EAAEA,EAAG,CAKzB,IAAAQ,EAAe,SAAUC,EAAa,CACxC,OAAOA,EAAM,CAAA,EAEXC,EAAe,SAAUD,EAAa,CACxC,MAAO,GAAIA,EAAM,EAAA,EAEfE,EAAY,SAAUF,EAAa,CACjCR,IAAAA,EAAIN,EAASc,CAAG,EAChBG,EAAQ,GAAKH,EAAMA,EAAM,IAAMA,EAAM,GACrC,OAAAD,EAAaC,CAAG,IACTG,GAAA,IAEPX,EAAE,CAAC,EAAE,SACPW,GAAS,GAAKX,EAAE,CAAC,EAAE,OAASA,EAAE,CAAC,EAAE,OAAS,GAAKA,EAAE,CAAC,EAAE,OAAS,IAExDW,CAAA,EAELC,EAAY,SAAUJ,EAAa,CACrC,IAAIG,EAAQD,EAAUF,CAAG,EAAI,GACzBR,EAAIN,EAASc,CAAG,EACX,OAAAG,GAAA,EAAIX,EAAE,CAAC,EAAE,CAAC,EAAIA,EAAE,CAAC,EAAE,CAAC,EACtBW,CAAA,EAELE,EAAgBL,GAAiBA,EAAM,GAAK,EAAI,GAEhDM,EAAgB,SAAUN,EAAa,CACzC,IAAIG,EAAQC,EAAUJ,CAAG,EAAI,EAAIK,EAAaL,CAAG,EACjD,OAAQG,EAAQ,EAAK,CAAA,EAGnBI,EAAS,SACXP,EACAQ,EACA7J,EACA8J,EACA,CACA,IAAIC,EAAM,CAAA,EACNC,EAAO,EACTC,EAAY,EACVC,EAAUlK,EAAK,OACfmK,EAAO,SAAUC,EAAWC,EAAW,CACzC,GAAIA,GAAKJ,EAAW,CAElB,IADAF,EAAI,KAAKC,EAAQI,IAAMC,GAAKJ,EAAW,EAChCI,GAAK,GACVN,EAAI,KAAMK,IAAMC,GAAK,GAAM,GAAG,EAEzBL,EAAA,EACKC,EAAA,EAEVI,EAAI,IACNL,IAASI,GAAM,GAAKC,GAAK,KAAQJ,GAAaI,GAChD,EAEEC,EAAWZ,EAAaL,CAAG,EAC/Bc,EAAKN,EAAM,CAAC,EACZM,EAAKD,EAASI,CAAQ,EACtB,QAAS1B,EAAI,EAAGA,EAAIsB,EAAS,EAAEtB,EACxBuB,EAAAnK,EAAK4I,CAAC,EAAG,CAAC,EAMV,IAJPuB,EAAK3B,EAAiB,CAAC,EACnByB,EAAY,GACdF,EAAI,KAAKC,CAAI,EAERD,EAAI,OAAS,EAAID,GAClBC,EAAA,KAAK,IAAM,EAAI,EAEjB,OAAAA,EAAI,OAASD,GACfC,EAAI,KAAK,GAAI,EAERA,CAAA,EAELQ,EAAe,SAAUvB,EAAgBwB,EAAmB,CAI9D,QAHIC,EAAUzB,EAAK,MAAM,CAAC,EACtB0B,EAAU1B,EAAK,OACjB2B,EAAaH,EAAQ,OACdI,EAAI,EAAGA,EAAID,EAAY,EAAEC,EAChCH,EAAQ,KAAK,CAAC,EAEP7B,QAAAA,EAAI,EAAGA,EAAI8B,GAAW,CAC7B,IAAIG,EAAWlC,EAAa8B,EAAQ7B,GAAG,CAAC,EACxC,GAAIiC,GAAY,EACd,QAAS5B,EAAI,EAAGA,EAAI0B,EAAY,EAAE1B,EACxBL,EAAAA,EAAIK,CAAC,GAAKP,GAAWmC,EAAWL,EAAQvB,CAAC,GAAK,GAAG,EAIxD,OAAAwB,EAAQ,MAAMC,CAAO,CAAA,EAE1BI,EAAe,SACjB9B,EACA+B,EACAP,EACA,CAKA,QAJIQ,EAAW,CAAA,EACXC,EAAWjC,EAAK,OAAS+B,EAAW,EACtCG,EAAW,EACTC,EAAQJ,EAAW/B,EAAK,OAAS+B,EAC5BnC,EAAI,EAAGA,EAAIuC,EAAO,EAAEvC,EAC3BoC,EAAS,KAAKE,CAAQ,EACVA,GAAAD,EAEd,QAASrC,EAAIuC,EAAOvC,EAAImC,EAAS,EAAEnC,EACjCoC,EAAS,KAAKE,CAAQ,EACtBA,GAAYD,EAAU,EAExBD,EAAS,KAAKE,CAAQ,EAEtB,QADIE,EAAO,CAAA,EACFxC,EAAI,EAAGA,EAAImC,EAAS,EAAEnC,EACxBwC,EAAA,KACHb,EAAavB,EAAK,MAAMgC,EAASpC,CAAC,EAAGoC,EAASpC,EAAI,CAAC,CAAC,EAAG4B,CAAO,CAAA,EAKlE,QAFIa,EAAS,CAAA,EACTC,EAAkBtC,EAAK,OAAS+B,EAAW,EACtCnC,EAAI,EAAGA,EAAI0C,EAAgB,EAAE1C,EACpC,QAASK,EAAI,EAAGA,EAAI8B,EAAS,EAAE9B,EAC7BoC,EAAO,KAAKrC,EAAKgC,EAAS/B,CAAC,EAAIL,CAAC,CAAC,EAGrC,QAASK,EAAIkC,EAAOlC,EAAI8B,EAAS,EAAE9B,EACjCoC,EAAO,KAAKrC,EAAKgC,EAAS/B,EAAI,CAAC,EAAI,CAAC,CAAC,EAEvC,QAASL,EAAI,EAAGA,EAAI4B,EAAQ,OAAQ,EAAE5B,EACpC,QAASK,EAAI,EAAGA,EAAI8B,EAAS,EAAE9B,EAC7BoC,EAAO,KAAKD,EAAKnC,CAAC,EAAEL,CAAC,CAAC,EAGnB,OAAAyC,CAAA,EAELE,EAAc,SAChBvC,EACAwC,EACAhB,EACAiB,EACA,CAEA,QADIhB,EAAUzB,GAAQyC,EACb7C,EAAI4C,EAAI,EAAG5C,GAAK,EAAG,EAAEA,EACvB6B,GAAYgB,EAAI7C,EAAM,IACzB6B,GAAWD,GAAW5B,GAG1B,OAAQI,GAAQyC,EAAKhB,CAAA,EAEnBiB,EAAiB,SAAUrC,EAAa,CAK1C,QAJIR,EAAIN,EAASc,CAAG,EAClBgB,EAAIf,EAAaD,CAAG,EAClBsC,EAAqB,CAAA,EACvBC,EAAuB,GAChBhD,EAAI,EAAGA,EAAIyB,EAAG,EAAEzB,EAChB+C,EAAA,KAAK,CAAA,CAAE,EACLC,EAAA,KAAK,CAAA,CAAE,EAElB,IAAIC,EAAO,SACTC,EACA1B,EACA2B,GACAC,GACAhC,GACA,CACA,QAASpB,EAAI,EAAGA,EAAImD,GAAG,EAAEnD,EACvB,QAASK,EAAI,EAAGA,EAAI+C,GAAG,EAAE/C,EAChB0C,EAAAG,EAAIlD,CAAC,EAAEwB,EAAInB,CAAC,EAAKe,GAAKpB,CAAC,GAAKK,EAAK,EACxC2C,EAASE,EAAIlD,CAAC,EAAEwB,EAAInB,CAAC,EAAI,CAE7B,EAEF4C,EAAK,EAAG,EAAG,EAAG,EAAG,CAAC,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAO,EAAM,EAAI,CAAC,EACxEA,EAAKxB,EAAI,EAAG,EAAG,EAAG,EAAG,CAAC,IAAO,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAI,CAAC,EACtEwB,EACE,EACAxB,EAAI,EACJ,EACA,EACA,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,CAAI,CAAA,EAEvD,QAASzB,EAAI,EAAGA,EAAIyB,EAAI,EAAG,EAAEzB,EACpB+C,EAAA,CAAC,EAAE/C,CAAC,EAAI+C,EAAO/C,CAAC,EAAE,CAAC,EAAI,CAACA,EAAI,EAC1BgD,EAAA,CAAC,EAAEhD,CAAC,EAAIgD,EAAShD,CAAC,EAAE,CAAC,EAAI,EAIpC,QAFIqD,EAASpD,EAAE,CAAC,EACdqD,EAAID,EAAO,OACJrD,EAAI,EAAGA,EAAIsD,EAAG,EAAEtD,EAGvB,QAFIuD,EAAOvD,IAAM,GAAKA,IAAMsD,EAAI,EAAI,EAAI,EACtCE,EAAOxD,IAAM,EAAIsD,EAAI,EAAIA,EAClBjD,EAAIkD,EAAMlD,EAAImD,EAAM,EAAEnD,EAC7B4C,EAAKI,EAAOrD,CAAC,EAAGqD,EAAOhD,CAAC,EAAG,EAAG,EAAG,CAAC,GAAM,GAAM,GAAM,GAAM,EAAI,CAAC,EAG/D,GAAAG,EAAaC,CAAG,EAGlB,QAFIgD,EAAOd,EAAYlC,EAAK,EAAG,KAAQ,EAAE,EACrCuB,GAAI,EACChC,EAAI,EAAGA,EAAI,EAAG,EAAEA,EACvB,QAASK,EAAI,EAAGA,EAAI,EAAG,EAAEA,EACvB0C,EAAO/C,CAAC,EAAEyB,EAAI,GAAKpB,CAAC,EAAI0C,EAAOtB,EAAI,GAAKpB,CAAC,EAAEL,CAAC,EAAKyD,GAAQzB,KAAO,EAChEgB,EAAShD,CAAC,EAAEyB,EAAI,GAAKpB,CAAC,EAAI2C,EAASvB,EAAI,GAAKpB,CAAC,EAAEL,CAAC,EAAI,EAInD,MAAA,CACL,OAAA+C,EACA,SAAAC,CAAA,CACF,EAEEU,EAAU,SACZX,EACAC,EACA7B,EACA,CAIA,QAHIM,EAAIsB,EAAO,OACXf,EAAI,EACN2B,EAAM,GACC3D,EAAIyB,EAAI,EAAGzB,GAAK,EAAGA,GAAK,EAAG,CAC9BA,IAAM,GACNA,EAAAA,EAGJ,QADI4D,EAAKD,EAAM,EAAIlC,EAAI,EAAI,EAClBpB,EAAI,EAAGA,EAAIoB,EAAG,EAAEpB,EAAG,CAC1B,QAASwD,EAAK7D,EAAG6D,EAAK7D,EAAI,EAAG,EAAE6D,EACxBb,EAASY,CAAE,EAAEC,CAAE,IACXd,EAAAa,CAAE,EAAEC,CAAE,EAAK1C,EAAIa,GAAK,CAAC,IAAM,CAACA,EAAI,GAAM,EAC3C,EAAAA,GAGA4B,GAAAD,EAERA,EAAM,CAACA,EAEF,OAAAZ,CAAA,EAELe,EAAW,SAAUf,EAAoBC,EAAsB,CAGjE,QAFIe,EAAQ,CAAC/D,EAAWK,KAAeL,EAAIK,GAAK,IAAM,EAClDoB,EAAIsB,EAAO,OACN/C,EAAI,EAAGA,EAAIyB,EAAG,EAAEzB,EACvB,QAASK,EAAI,EAAGA,EAAIoB,EAAG,EAAEpB,EAClB2C,EAAShD,CAAC,EAAEK,CAAC,IAEhB0C,EAAO/C,CAAC,EAAEK,CAAC,GAAK0D,EAAM/D,EAAGK,CAAC,GAIzB,OAAA0C,CAAA,EAELiB,EAAgB,SAAUjB,EAAoBkB,EAAkB,CAGlE,QAFIxC,EAAIsB,EAAO,OACXU,EAAOd,EAAasB,GAAY,EAAK,EAAG,EAAG,KAAO,EAAE,EAAI,MACnDjE,EAAI,EAAGA,EAAI,GAAI,EAAEA,EAAG,CAC3B,IAAIkE,EAAI,CACN,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACAzC,EAAI,EACJA,EAAI,EACJA,EAAI,EACJA,EAAI,EACJA,EAAI,EACJA,EAAI,EACJA,EAAI,GACJzB,CAAC,EACCmE,EAAI,CACN1C,EAAI,EACJA,EAAI,EACJA,EAAI,EACJA,EAAI,EACJA,EAAI,EACJA,EAAI,EACJA,EAAI,EACJA,EAAI,EACJ,EACA,EACA,EACA,EACA,EACA,EACA,GACAzB,CAAC,EACI+C,EAAAmB,CAAC,EAAE,CAAC,EAAInB,EAAO,CAAC,EAAEoB,CAAC,EAAKV,GAAQzD,EAAK,EAEvC,OAAA+C,CAAA,EAELqB,EAAW,SAAUhN,EAAgBqJ,EAAa,CAChDR,IAAAA,EAAIN,EAASc,CAAG,EAChBU,EAAMH,EAAOP,EAAKZ,EAAYzI,EAAMyJ,EAAUJ,CAAG,GAAK,CAAC,EAC3DU,EAAMe,EAAaf,EAAKlB,EAAE,CAAC,EAAE,CAAC,EAAGC,EAAcD,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnD,IAAAwC,EAASK,EAAerC,CAAG,EAC3BsC,EAASN,EAAO,OAClBO,EAAWP,EAAO,SACZ,OAAAiB,EAAAX,EAAQC,EAAU7B,CAAG,EAC7B2C,EAASf,EAAQC,CAAQ,EACzBgB,EAAcjB,EAAQ,CAAC,EAChBA,CAAA,EAELsB,EAAS,CACX,SAAU,SAAUC,EAAgB,CAClC,MAAMlN,EAAO,IAAI,YAAY,EAAE,OAAOkN,CAAM,EAC5C,IAAI7D,EAAM,EACV,IAAKA,EAAM,EAAGA,GAAO,IACf,EAAArJ,EAAK,QAAU2J,EAAcN,CAAG,GADb,EAAEA,EACzB,CAKK,OAAA2D,EAAShN,EAAMqJ,CAAG,CAC3B,EACA,cAAe,SACb6D,EACAhI,EACA,CACE,UAAAiI,EAAY,UACZ,UAAAC,EAAY,UACZ,OAAAC,EAAS,IACT,QAAAC,EAAU,EACZ,EAAI,GACJ,CACA,IAAI3B,EAASsB,EAAO,SAAYC,CAAM,EAClC7C,EAAIsB,EAAO,OACX4B,EAAOD,GAAWjD,EAAI,EAAIgD,GACvBnI,EAAA,MAAQA,EAAO,OAASqI,EACzB,MAAA3H,EAAUV,EAAO,WAAW,IAAI,EACtC,GAAIU,GAAW,KACP,MAAA,IAAI,MAAM,mCAAmC,EAErDA,EAAQ,UAAYuH,EACpBvH,EAAQ,SAAS,EAAG,EAAG2H,EAAMA,CAAI,EACjC3H,EAAQ,UAAYwH,EACpBxH,EAAQ,sBAAwB,GAChC,QAASgD,EAAI,EAAGA,EAAIyB,EAAG,EAAEzB,EACvB,QAASK,EAAI,EAAGA,EAAIoB,EAAG,EAAEpB,EACnB0C,EAAO/C,CAAC,EAAEK,CAAC,GACLrD,EAAA,SACN0H,GAAWD,EAASpE,GACpBqE,GAAWD,EAASzE,GACpB0E,EACAA,CAAA,CAKV,CAAA,EAEK,OAAAL,CACT,CCpjBA,SAAwBO,GAAO,CAAE,SAAA1F,EAAU,MAAA2F,GAAgB,CACnD,MAAA1F,EAAY9G,EAA0B,IAAI,EAChDnB,OAAAA,EAAU,IAAM,CACdiI,EAAU,SACRD,GACAQ,GAAA,EAAK,cAAcR,EAAUC,EAAU,OAAO,CAC/C,EAAA,CAACA,EAAU,QAASD,CAAQ,CAAC,EACxBK,EAAA,cAAA,SAAA,CAAO,MAAAsF,EAAc,IAAK1F,CAAW,CAAA,CAC/C,CCRA,MAAM2F,GAA8B,CAClC,QAAS,OACT,cAAe,SACf,eAAgB,SAChB,WAAY,OACd,EAEA,SAAwBC,GAAQ,CAAE,IAAAC,EAAK,QAAAC,GAAkB,CAErD,OAAA1F,EAAA,cAAC2F,GAAO,MAAO,CAAE,eAAgB,cAAe,CAAA,EAC7C3F,EAAA,cAAA,MAAA,IAAI,EACLA,EAAA,cAAC,MAAA,CACC,MAAO,CACL,MAAO,KACT,CAAA,EAEAA,EAAA,cAACqF,GAAA,CACC,YAAY,YACZ,QAAS,EACT,MAAO,CACL,MAAO,OACP,OAAQ,iBACV,CAAA,EAECI,CACH,EACAzF,EAAA,cAAC,IAAA,CACC,KAAMyF,EACN,MAAO,CACL,UAAW,SACX,QAAS,QACT,SAAU,QACV,UAAW,QACX,UAAW,QACb,CAAA,EAECA,CACH,CAEF,EAAAzF,EAAA,cAAC,MAAA,CACC,MAAO,CACL,GAAGuF,GACH,MAAO,EACP,SAAUG,EAAQ,OAAS,GAAM,EACjC,WAAY,yBACd,CAAA,EAECA,EAAQ,IAAKjM,GACZuG,EAAA,cAAC4F,GAAW,CAAA,IAAKnM,EAAO,GAAK,GAAGA,CAAQ,CAAA,CACzC,CAAA,CAEL,CAEJ,CAEA,MAAMmM,GAAcnM,GAAgC,CAClD,KAAM,CAACoM,EAAUC,CAAW,EAAI/O,EAAS,EAAK,EAC9CY,OAAAA,EAAU,IAAM,CACd,OAAO,WAAW,IAAMmO,EAAY,EAAI,EAAG,GAAG,CAChD,EAAG,CAAE,CAAA,EAEH9F,EAAA,cAAC,MAAA,CACC,MAAO,CACL,QAAS6F,EAAW,EAAI,EACxB,OAAQ,UACR,WAAY,iDACZ,UAAWpM,EAAO,MAAQ,4BAA8B,OACxD,UAAW,gDACX,SAAU,KACZ,EACA,IAAKA,EAAO,EAAA,EAEZuG,EAAA,cAAC,KAAA,CACC,MAAO,CACL,MAAOvG,EAAO,MACd,SAAU,MACV,WAAY,cACZ,WAAY,QACd,CAAA,EAECA,EAAO,KAAK,IAAEA,EAAO,MAASuG,EAAA,cAAA,QAAA,KAAM,IAAE,EAAW,IACpD,CAAA,CAGN,EC3FwB,SAAA+F,GACtBC,EACAC,EACA,CAEA,MAAMC,EAAgB1N,EACpB,IACE,iCAAewN,GACX,KAAK,MAAM,aAAaA,CAAe,CAAC,EACxCC,EACN,CAAC,CAAA,EAEG,CAAClL,EAAOoL,CAAQ,EAAIpP,EAAYmP,CAAa,EACnDvO,OAAAA,EAAU,IAAM,CACd,eAAiB,aAAaqO,CAAe,EAAI,KAAK,UAAUjL,CAAK,EAAA,EACpE,CAACA,CAAK,CAAC,EACH,CAACA,EAAOoL,CAAQ,CACzB,CCXA,MAAMC,GAAkB,CACtB,WAAY,IACZ,UAAW,EACX,WAAY,IACZ,oBAAqB,GACrB,6BAA8B,GAC9B,aAAc,GACd,sBAAuB,IACzB,EAIaC,GAAsBC,GAAc,CAC/CF,GACC,IAAM,CAAC,CACV,CAAU,EAEM,SAAAG,GAAqB,CAAE,SAAA5G,GAAmC,CAClE,MAAA5E,EAAQgL,GAAgB,eAAgBK,EAAe,EAC7D,uBACGC,GAAoB,SAApB,CAA6B,MAAOtL,GAClC4E,CACH,CAEJ,CC3BA,SAAwB6G,GAAW,CACjC,QAAAd,EACA,IAAAD,CACF,EAGG,CAEC,OAAAzF,EAAA,cAAC,MAAA,CACC,MAAO,CACL,SAAU,WACV,OAAQ,GACR,MAAO,EACP,QAAS,OACT,cAAe,SACf,eAAgB,SAChB,OAAQ,MACV,CAAA,EAEAA,EAAA,cAAC,MAAA,CACC,MAAO,CACL,SAAU,EACV,QAAS,OACT,eAAgB,SAChB,cAAe,SACf,WAAY,UACd,CAAA,EAEC0F,EAAQ,IAAKjM,GACZuG,EAAA,cAAC,MAAA,CACC,IAAKvG,EAAO,GACZ,MAAO,CACL,MAAOA,EAAO,MACd,UAAW,QACX,OAAQ,UACR,cAAe,KACjB,CAAA,EAEAuG,EAAA,cAAC,OAAI,MAAO,CAAE,SAAU,OAAQ,CAAA,EAAIvG,EAAO,KAAM,EACjDuG,EAAA,cAAC,MAAI,CAAA,MAAO,CAAE,SAAU,QAAS,WAAY,QAAA,GAC1CvG,EAAO,IACV,CAAA,CAEH,CACH,EACCP,GAAW,OAASwM,EAAQ,QAC3B1F,EAAA,cAACqF,GAAA,CACC,YAAY,YACZ,QAAS,EACT,MAAO,CACL,MAAO,IACP,OAAQ,IACR,OAAQ,KACV,CAAA,EAECI,CACH,CAAA,CAIR,CC3CA,MAAMgB,GAAqB,CACzBC,EACAC,KACe,CACf,KAAM,eACN,cAAe,EACf,YAAAD,EACA,WAAAC,CACF,GAEwB,SAAAC,GAAM,CAAE,UAAAhQ,GAAoC,CAClE,KAAM,CAACiQ,EAAcvP,CAAW,EAAIX,GAAmBC,CAAS,EAC1D,CAAC8O,EAAS9L,CAAS,EAAIR,GAAiB9B,CAAW,EACzD,OAAIuP,IAAiB,aAEhB7G,EAAA,cAAA8G,EAAA,CAAO,MAAO,CAAE,UAAW,yBAA0B,CAAA,EAAG,uBACnC9G,EAAA,cAAC,QAAK,MAAO,CAAE,MAAO,WAAY,SAAO,EAAO,OAAK,IACxEA,EAAA,cAAA,KAAA,IAAG,EACJA,EAAA,cAAC,SAAM,MAAO,CAAE,SAAU,UAAW,0BACZA,EAAA,cAAC,KAAG,IAAA,EAAE,sBAC/B,CACF,EAGA6G,IAAiB,SAEhB7G,EAAA,cAAA8G,EAAA,KAAO,+BACsB9G,EAAA,cAAC,OAAK,CAAA,MAAO,CAAE,MAAO,KAAM,CAAA,EAAG,QAAM,EAAQ,GAC3E,kBAIDuG,GACC,KAAAvG,EAAA,cAAC+G,GAAA,CACC,UAAAnQ,EACA,QAAA8O,EACA,kBAAmB9L,EAAU,iBAAA,CAAA,CAEjC,CAEJ,CAEO,SAASmN,GAAK,CACnB,UAAAnQ,EACA,kBAAAoQ,EAAoB,GACpB,QAAAtB,CACF,EAIG,CACK,KAAA,CAAC9L,EAAWC,CAAY,EAAI9C,EAAoB,CAAE,KAAM,QAAS,EAEjEkQ,EAAezO,EACnB,KAAOkN,EAAQ,QAAU,GAAK,EAC9B,CAACA,EAAQ,MAAM,CAAA,EAIjB/N,EAAU,IAAM,CACV,GAAAiC,EAAU,OAAS,eAGvB,GAAIA,EAAU,cAAe,CACrB,MAAAsN,EAAU,WAAW,KACZrN,EAAA,CACX,GAAGD,EACH,cAAeA,EAAU,cAAgB,CAAA,CAC1C,EACM,IAAM,aAAasN,CAAO,GAChC,GAAI,OAGMrN,EAAA,CACX,KAAM,UACN,QAAS,GACT,gBAAiB6L,EACd,OAAQjM,GAAWA,EAAO,KAAK,EAC/B,IAAKA,IACJA,EAAO,SAAS,SAAS,EAClBA,EAAO,GACf,CAAA,CACJ,CACH,EACC,CAACG,CAAS,CAAC,EAGdjC,EAAU,IAAM,CAGZiC,EAAU,OAAS,SACnB8L,EAAQ,SACPA,EAAQ,OAAS,GAAKsB,IACvBtB,EAAQ,MAAOjM,GAAWA,EAAO,KAAK,GAEtCI,EAAa4M,IAAoB,EAG/B7M,EAAU,OAAS,SAAW,CAAC8L,EAAQ,KAAMjM,GAAWA,EAAO,KAAK,GACzDI,EAAA,CAAE,KAAM,OAAA,CAAS,CAE/B,EAAA,CAAC6L,EAAS9L,EAAU,IAAI,CAAC,EAGtB,MAAAuN,EAAgB3O,EAAQ,IAAM,CAC9B,GAAAoB,EAAU,OAAS,UACd,OAAA,KAET,MAAMwN,EAAS1B,EAAQ,OAAQjM,GAC7BG,EAAU,gBAAgB,SAASH,EAAO,EAAE,CAAA,EAEvC,MAAA,CACL,OAAA2N,EACA,MAAOA,EAAO,OAAQC,GAAgBA,EAAY,QAAU,SAAS,CAAA,CAEtE,EAAA,CAACzN,EAAU,KAAM8L,CAAO,CAAC,EAG5B/N,EAAU,IAAM,CACd,GAAI,CAACwP,EACH,OAEI,MAAAG,EAAaH,EAAc,MAAM,OAEjCI,EACJD,IAAe,GAAKH,EAAc,OAAO,SAAW,EAClD,GAAAG,GAAc,GAAK,CAACC,EAA2B,CAEjD1N,EAAckB,IAAW,CAAE,GAAGA,EAAO,QAAS,EAAQ,EAAA,EAChD,MAAAyM,EAAqBL,EAAc,OAAO,OAC9C,CAACM,EAAWhO,IACVA,EAAO,QAASgO,GAAA,YAAAA,EAAW,QAAS,GAAKhO,EAASgO,EACpD,IAAA,EAEF,OAAO,WAAW,IAAM,CACtB5N,EAAckB,GACZA,EAAM,OAAS,UACX0L,GACEU,EAAc,MAAM,CAAC,GAAK,CAAE,MAAO,UAAW,KAAM,QAAS,IAC5DK,GAAA,YAAAA,EAAoB,QAAS,GAAKP,EAC9BO,EACD,MAAA,EAENzM,CAAA,GAEL,GAAI,EACT,EACC,CAACoM,CAAa,CAAC,EAGZ,MAAAO,EAAgBjO,GAAwB,CACxC0N,GAAiB,OAGrB1N,EAAO,SAAS,MAAM,EACtB0N,EAAc,MACX,OAAQ,GAAM,EAAE,KAAO1N,EAAO,EAAE,EAChC,QAAS4N,GAAgBA,EAAY,SAASA,EAAY,MAAQ,CAAC,CAAC,EAAA,EAInEM,EAAYnP,EAChB,IACEoB,EAAU,OAAS,UACf8L,EACG,OAAQjM,GAAWG,EAAU,gBAAgB,SAASH,EAAO,EAAE,CAAC,EAChE,IAAKA,IAAY,CAChB,GAAIA,EAAO,GACX,MAAOA,EAAO,MACd,YAAa,IAAMiO,EAAajO,CAAM,EACtC,YAAaA,EAAO,WACtB,EAAE,EACJ,CAAC,EACP,CAACG,EAAU,KAAM8L,CAAO,CAAA,EAGpBD,EAAM,GAAG,OAAO,SAAS,aAAa,OAAO,SAAS,OAAO,OAAO,SAAS,YAAY7O,IAC/F,OAAQgD,EAAU,KAAM,CACtB,IAAK,QACI,OAAAoG,EAAA,cAACwF,GAAQ,CAAA,QAAAE,EAAkB,IAAAD,CAAU,CAAA,EAE9C,IAAK,UACH,OACGzF,EAAA,cAAA2F,EAAA,KACE3F,EAAA,cAAAN,GAAA,CAAU,MAAOiI,EAAW,IAAK/N,EAAU,QAAS,EACrDoG,EAAA,cAACwG,GAAW,CAAA,QAAAd,EAAkB,IAAAD,CAAU,CAAA,CAC1C,EAGJ,IAAK,eAAgB,CACb,MAAAmC,EACJhO,EAAU,YAAc,qBACrBkN,EACC,KAAA9G,EAAA,cAAC,OAAK,CAAA,MAAO,CAAE,MAAOpG,EAAU,WAAW,KAAA,CACxC,EAAAA,EAAU,WAAW,IACxB,EAAQ,IAAI,gBAEd,EACEA,EAAU,eAAiB,kBAC5BkN,EAAO,CAAA,IAAI,WACT,EAAAlN,EAAU,YAAc,aAAe,cAAc,MAAI,IACzDoG,EAAA,cAAA,OAAA,CAAK,MAAO,CAAE,MAAO,MAAO,QAAS,cAAe,CAAA,EAClDpG,EAAU,aACb,CACF,EACEA,EAAU,YACZoG,EAAA,cAAC8G,EACC,KAAA9G,EAAA,cAAC,OAAA,CACC,MAAO,CACL,MAAOpG,EAAU,YAAY,KAC/B,CAAA,EAECA,EAAU,YAAY,IAAA,EACjB,IAAI,UAEd,EAEAoG,EAAA,cAAC8G,OAAO,WAAS,EAGnB,OAAA9G,EAAA,cAAC2F,GAAO,IAAK/L,EAAU,cAAgB,EAAI,UAAY,aACpDgO,CACH,CAEJ,CACF,CACF"}