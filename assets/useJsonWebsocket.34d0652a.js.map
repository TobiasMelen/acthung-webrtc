{"version":3,"file":"useJsonWebsocket.34d0652a.js","sources":["../../src/constants.tsx","../../src/messaging/dataChannelMessaging.ts","../../src/hooks/useJsonWebsocket.ts"],"sourcesContent":["export const SIGNALING_URL =\n  import.meta.env.VITE_SIGNAL_URL ??\n  (() => {\n    throw new Error(\n      \"VITE_SIGNAL_URL for signaling server must be specified in env.\"\n    );\n  })();\n\nexport const DEFAULT_COLOR = \"white\";\n\nexport const DEFAULT_FONT_FAMILY = `-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Open Sans\", \"Helvetica Neue\", sans-serif`;\n\nexport const DEFAULT_FONT_FAMILY_MONOSPACE = `SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace`;\n\nexport const ALL_COLORS = [\n  \"#3f5\",\n  \"#f24\",\n  \"#46f\",\n  \"#ef2\",\n  \"#d3f\",\n  \"#f9b\",\n  \"#fff\",\n];\n\nexport const SIGNAL_CLIENT_DEFAULT_PARAMS = (\n  opts: SocketIOClient.ConnectOpts\n) =>\n  [\n    SIGNALING_URL,\n    {\n      transports: [\"websocket\"],\n      ...opts,\n    } as SocketIOClient.ConnectOpts,\n  ] as const;\n\nexport const DEFAULT_RTC_PEER_CONFIG: RTCConfiguration = {\n  iceServers: [\n    { urls: [\"stun:stun.l.google.com:19302\"] },\n    {\n      urls: [\"turn:relay.backups.cz\"],\n      credential: \"webrtc\",\n      username: \"webrtc\",\n    },\n  ],\n};\n","import {\n  jsonConverter,\n  stringConverter,\n  booleanConverter,\n  numberConverter,\n} from \"./valueConverters\";\nimport setupMessageChannel, { Converter } from \"./setupMessageChannel\";\n\nconst messagesFromLobby = {\n  playerState: jsonConverter as Converter<Partial<PlayerState>>,\n  gameState: jsonConverter as Converter<Partial<GameState>>,\n  ping: numberConverter,\n  err: jsonConverter,\n};\n\nconst messagesFromPlayer = {\n  setColor: stringConverter,\n  setReady: booleanConverter,\n  setName: stringConverter,\n  turn: numberConverter,\n  ping: numberConverter,\n};\n\nexport type MessageChannelToPlayer = ReturnType<\n  typeof createMessageChannelToPlayer\n>;\n\nexport function createMessageChannelToPlayer(\n  connection: RTCPeerConnection,\n  dataChannel: RTCDataChannel\n) {\n  return setupMessageDataChannel(connection, dataChannel)(\n    messagesFromLobby,\n    messagesFromPlayer,\n    \"ping\"\n  );\n}\n\nexport type MessageChannelToLobby = ReturnType<\n  typeof createMessageChannelToLobby\n>;\n\nexport function createMessageChannelToLobby(\n  connection: RTCPeerConnection,\n  dataChannel: RTCDataChannel\n) {\n  return setupMessageDataChannel(connection, dataChannel)(\n    messagesFromPlayer,\n    messagesFromLobby\n  );\n}\n\nfunction setupMessageDataChannel(\n  connection: RTCPeerConnection,\n  dataChannel: RTCDataChannel\n) {\n  return setupMessageChannel({\n    send: (msg) => dataChannel.readyState === \"open\" && dataChannel.send(msg),\n    bindReceive(receive) {\n      dataChannel.addEventListener(\"message\", (ev) => receive(ev.data));\n      return () => {\n        dataChannel.close();\n        connection.close();\n      };\n    },\n  });\n}\n","import { useRef, useState, useEffect, useMemo } from \"react\";\n\nexport default function useJsonWebsocket(url?: string, reconnectAttempts = 5) {\n  const [retries, setRetries] = useState(0);\n  const failedAllRetries = retries > reconnectAttempts;\n  const [socket, setSocket] = useState<WebSocket>();\n  //Clear socket on url changes\n  useEffect(() => {\n    setSocket((socket) => {\n      if (socket) {\n        socket.onclose = null;\n        socket?.close();\n      }\n      return undefined;\n    });\n    setRetries(0);\n  }, [url]);\n  useEffect(() => {\n    if (!url || socket != null || failedAllRetries) {\n      return;\n    }\n    const s = new WebSocket(url);\n    let retryTimeout: number;\n    s.onclose = () => {\n      retryTimeout = window.setTimeout(() => {\n        setRetries((r) => r + 1);\n        setSocket(undefined);\n      }, 1000);\n    };\n    s.onopen = () => {\n      setSocket(s);\n      setRetries(0);\n    };\n    s.onerror = () => s.close();\n    return () => {\n      window.clearTimeout(retryTimeout);\n    };\n  }, [url, retries, socket]);\n  const jsonSocket = useMemo(\n    () =>\n      socket\n        ? {\n            addListener(listener: (data: any) => void) {\n              const fn = ({ data }: MessageEvent<any>) =>\n                listener(JSON.parse(data));\n              socket.addEventListener(\"message\", fn);\n              return () => socket.removeEventListener(\"message\", fn);\n            },\n            send(data: any) {\n              socket.send(JSON.stringify(data));\n            },\n          }\n        : null,\n    [socket]\n  );\n  return jsonSocket == null\n    ? {\n        status: failedAllRetries\n          ? (\"failed\" as const)\n          : (\"connecting\" as const),\n      }\n    : { status: \"connected\" as const, ...jsonSocket };\n}\n"],"names":["SIGNALING_URL","DEFAULT_COLOR","DEFAULT_FONT_FAMILY","ALL_COLORS","DEFAULT_RTC_PEER_CONFIG","iceServers","urls","credential","username","messagesFromLobby","playerState","jsonConverter","gameState","ping","numberConverter","err","messagesFromPlayer","setColor","stringConverter","setReady","booleanConverter","setName","turn","connection","dataChannel","setupMessageDataChannel","setupMessageChannel","send","msg","readyState","bindReceive","receive","addEventListener","ev","data","close","url","reconnectAttempts","retries","setRetries","useState","failedAllRetries","socket","setSocket","socket2","onclose","s","WebSocket","retryTimeout","window","setTimeout","r","onopen","onerror","clearTimeout","jsonSocket","useMemo","[object Object]","listener","fn","JSON","parse","removeEventListener","stringify","status","__spreadValues"],"mappings":"+VAAaA,EACX,qCAOWC,EAAgB,QAEhBC,EAAsB,8HAItBC,EAAa,CACxB,OACA,OACA,OACA,OACA,OACA,OACA,QAcWC,EAA4C,CACvDC,WAAY,CACV,CAAEC,KAAM,CAAC,iCACT,CACEA,KAAM,CAAC,yBACPC,WAAY,SACZC,SAAU,YCjCVC,EAAoB,CACxBC,YAAaC,EACbC,UAAWD,EACXE,KAAMC,EACNC,IAAKJ,GAGDK,EAAqB,CACzBC,SAAUC,EACVC,SAAUC,EACVC,QAASH,EACTI,KAAMR,EACND,KAAMC,cAQNS,EACAC,UAEOC,EAAwBF,EAAYC,EAApCC,CACLhB,EACAO,EACA,mBASFO,EACAC,UAEOC,EAAwBF,EAAYC,EAApCC,CACLT,EACAP,GAIJ,WACEc,EACAC,UAEOE,EAAoB,CACzBC,KAAOC,GAAmC,SAA3BJ,EAAYK,YAAyBL,EAAYG,KAAKC,GACrEE,YAAYC,MACEC,iBAAiB,WAAYC,GAAOF,EAAQE,EAAGC,QACpD,OACOC,UACDA,uBC5DsBC,EAAcC,EAAoB,SAClEC,EAASC,GAAcC,EAAS,GACjCC,EAAmBH,EAAUD,GAC5BK,EAAQC,GAAaH,OAElB,QACGI,IACLA,MACKC,QAAU,gBACTV,cAID,KACV,CAACC,OACM,SACHA,GAAiB,MAAVM,GAAkBD,eAGxBK,EAAI,IAAIC,UAAUX,OACpBY,WACFH,QAAU,OACKI,OAAOC,YAAW,QACnBC,GAAMA,EAAI,WACZ,KACT,QAEHC,OAAS,OACCN,KACC,MAEXO,QAAU,IAAMP,EAAEX,QACb,YACEmB,aAAaN,MAErB,CAACZ,EAAKE,EAASI,UACZa,EAAaC,GACjB,IACEd,EACI,CACEe,YAAYC,SACJC,EAAK,EAAGzB,KAAAA,KACZwB,EAASE,KAAKC,MAAM3B,aACfF,iBAAiB,UAAW2B,GAC5B,IAAMjB,EAAOoB,oBAAoB,UAAWH,IAErDF,KAAKvB,KACIP,KAAKiC,KAAKG,UAAU7B,MAG/B,MACN,CAACQ,WAEkB,MAAda,EACH,CACES,OAAQvB,EACH,SACA,iIAEPwB,EAAED,OAAQ,aAAyBT"}