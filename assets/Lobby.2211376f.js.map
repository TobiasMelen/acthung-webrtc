{"version":3,"file":"Lobby.2211376f.js","sources":["../../src/hooks/useEffectWithDeps.ts","../../src/hooks/useStateForLobby.ts","../../src/gameCanvas/snakeGameContext.ts","../../src/components/GameRound.tsx","../../src/qr.ts","../../src/components/QrCode.tsx","../../src/components/Waiting.tsx","../../src/components/GameSettingsContext.tsx","../../src/hooks/useLocalStorage.ts","../../src/components/Scoreboard.tsx","../../src/components/Lobby.tsx","../../src/hooks/useConnectionForLobby.ts"],"sourcesContent":["import { useEffect, useRef, DependencyList, EffectCallback } from \"react\";\n\nexport default function useEffectWithDeps<Deps extends DependencyList>(\n  effect: (prevDeps?: Deps) => ReturnType<EffectCallback>,\n  deps: Deps\n) {\n  const dependencyRef = useRef<Readonly<Deps>>();\n  useEffect(() => {\n    const prevDeps = dependencyRef.current;\n    dependencyRef.current = deps;\n    return effect(prevDeps);\n  }, deps);\n}\n","import { useState, useMemo, useRef, useEffect } from \"react\";\nimport { PlayerConnections } from \"./useConnectionForLobby\";\nimport useEffectWithDeps from \"./useEffectWithDeps\";\nimport { ALL_COLORS } from \"../constants\";\nimport { extractObjectDiff } from \"../utility\";\nimport {\n  MessageChannelToPlayer,\n  MessageTypesToLobby,\n  MessageTypesToPlayer,\n} from \"../messaging/dataChannelMessaging\";\n\ntype PlayerStates = { [id: string]: LobbyPlayer };\n\ntype PlayerFunctions = {\n  setState(state: PlayerState[\"state\"]): void;\n  setScore(score: number): void;\n  onTurnInput(callBack: (turn: number) => void): void;\n};\n\nexport type LobbyPlayer = PlayerState &\n  PlayerFunctions & { id: string; timeout?: number };\n\nconst getColorAvailability = (assignedColors: string[] = []) =>\n  ALL_COLORS.reduce((acc, color) => {\n    acc[color] = assignedColors.indexOf(color) === -1;\n    return acc;\n  }, {} as { [color: string]: boolean });\n\n/*\n * The Lobby component is responsible for converting webrtc channels into player objects with state and client messaging.\n */\nexport default function useStateForLobby(clientConnections: PlayerConnections) {\n  const createPlayerModifier =\n    (playerKey: string) => (fn: (prev: LobbyPlayer) => LobbyPlayer) =>\n      setPlayerState(({ [playerKey]: player, ...otherPlayers }) => ({\n        ...otherPlayers,\n        [playerKey]: fn(player),\n      }));\n\n  const [playerStates, setPlayerState] = useState<PlayerStates>({});\n  const [gameState, setGameState] = useState<GameState>({\n    colorAvailability: getColorAvailability(),\n    allowSinglePlayer: false,\n  });\n\n  //Create players from connections\n  useEffectWithDeps(\n    (prevDeps) => {\n      const [prevConnections] = prevDeps ?? [{}];\n      setPlayerState((playerStates) => {\n        const connectionKeys = Object.keys(clientConnections);\n        //Timeout disconnecting players.\n        const disconnectingPlayers = Object.keys(playerStates)\n          .filter((id) => !connectionKeys.includes(id))\n          .map((disconnectId) => {\n            clearTimeout(playerStates[disconnectId]?.timeout);\n            return {\n              ...playerStates[disconnectId],\n              timeout: window.setTimeout(\n                () =>\n                  setPlayerState(\n                    ({ [disconnectId]: _removePlayer, ...playerStates }) =>\n                      playerStates\n                  ),\n                2000\n              ),\n            };\n          })\n          .reduce((acc, player) => {\n            acc[player.id] = player;\n            return acc;\n          }, {} as PlayerStates);\n\n        //if we get new players, we should update colors.\n        let updatedColorAvailability: typeof gameState[\"colorAvailability\"];\n        let queuespot = 1;\n        const connectedPlayers = connectionKeys.reduce(\n          (acc, connKey, index) => {\n            const prevPlayerState = playerStates[connKey];\n            clearTimeout(prevPlayerState?.timeout);\n            const modifyPlayer = createPlayerModifier(connKey);\n            let playerState =\n              prevPlayerState ??\n              (() => {\n                updatedColorAvailability = updatedColorAvailability ?? {\n                  ...gameState.colorAvailability,\n                };\n                //Create new player if color can be assigned.\n                const assignedColor = Object.entries(\n                  updatedColorAvailability\n                ).find(([_color, avail]) => avail)?.[0];\n                if (assignedColor != null) {\n                  updatedColorAvailability[assignedColor] = false;\n                  return {\n                    id: connKey,\n                    name: `Player ${index + 1}`,\n                    color: assignedColor,\n                    ready: false,\n                    score: 0,\n                    state: \"joining\",\n                    latency: 0,\n                    //By saving the functions here they will be in data communicated through datachannel.\n                    //JSON stringify will fix it further down the line, but it's still a bit shoddy.\n                    setState: (state: PlayerState[\"state\"]) =>\n                      modifyPlayer((player) => ({ ...player, state })),\n                    setScore: (score: number) =>\n                      modifyPlayer((player) => ({ ...player, score })),\n                    onTurnInput: (turner) =>\n                      clientConnections[connKey]?.on(\"turn\", turner),\n                  } as LobbyPlayer;\n                }\n              })();\n            //Connection has no player and no player could be assigned\n            if (playerState == null) {\n              clientConnections[connKey].send(\"err\", {\n                reason: \"lobbyFull\",\n                queuespot,\n              });\n              queuespot++;\n              return acc;\n            }\n            //Wire or re-wire player message handlers for new players or connections\n            const currentConnection = clientConnections[connKey];\n            if (\n              prevPlayerState == null ||\n              currentConnection !== prevConnections[connKey]\n            ) {\n              const bindMessageToStateKey = <TModel>(\n                eventName: MessageTypesToLobby,\n                modifier: (cb: (input: TModel) => any) => void,\n                keyName: keyof TModel\n              ) => {\n                currentConnection.on(eventName, (data) =>\n                  modifier((old) => ({ ...old, [keyName]: data }))\n                );\n              };\n              bindMessageToStateKey(\"setColor\", modifyPlayer, \"color\");\n              bindMessageToStateKey(\"setName\", modifyPlayer, \"name\");\n              bindMessageToStateKey(\"setReady\", modifyPlayer, \"ready\");\n              bindMessageToStateKey(\n                \"allowSinglePlayer\",\n                setGameState,\n                \"allowSinglePlayer\"\n              );\n              playerState = {\n                ...playerState,\n                onTurnInput: (turner) => currentConnection.on(\"turn\", turner),\n              };\n            }\n            acc[connKey] = playerState;\n            return acc;\n          },\n          {} as typeof playerStates\n        );\n        return { ...disconnectingPlayers, ...connectedPlayers };\n      });\n    },\n    [clientConnections] as const\n  );\n\n  //Update gamestate colors from player-updates\n  const assignedColors = Object.values(playerStates).map(\n    (player) => player.color\n  );\n  useEffect(() => {\n    setGameState((gameState) => ({\n      ...gameState,\n      colorAvailability: getColorAvailability(assignedColors),\n    }));\n  }, [assignedColors.join(\":\")]);\n\n  //Report individual playerstates to clients\n  useEffectWithDeps(\n    (prevDeps) => {\n      const [prevClientConnections, prevPlayerStates] = prevDeps ?? [];\n      Object.keys(playerStates).forEach((key) => {\n        const newState = playerStates[key];\n        const oldState = prevPlayerStates?.[key];\n        //send complete state if connection changed or state is new\n        if (\n          clientConnections[key] != prevClientConnections?.[key] ||\n          oldState == null\n        ) {\n          clientConnections[key]?.send(\"playerState\", newState);\n        }\n        //send partial state updates to existing connections\n        else if (newState !== oldState) {\n          clientConnections[key]?.send(\n            \"playerState\",\n            extractObjectDiff(oldState, newState, \"function\")\n          );\n        }\n      });\n    },\n    [clientConnections, playerStates] as const\n  );\n\n  //Report gamestate to clients\n  useEffectWithDeps(\n    (prevDeps) => {\n      const [prevClientConnections, prevGameState] = prevDeps ?? [];\n      const stateUpdate =\n        prevGameState !== gameState &&\n        extractObjectDiff(prevGameState, gameState);\n      Object.keys(clientConnections).forEach((id) => {\n        const currentConn = clientConnections[id];\n        //Send complete state to new/updated connections\n        if (currentConn != prevClientConnections?.[id]) {\n          currentConn?.send(\"gameState\", gameState);\n        }\n        //Otherwise send updated state keys only\n        else if (stateUpdate) {\n          currentConn?.send(\"gameState\", stateUpdate);\n        }\n      });\n    },\n    [clientConnections, gameState] as const\n  );\n\n  const players = useMemo(() => Object.values(playerStates), [playerStates]);\n\n  return [players, gameState] as const;\n}\n","import { inlineThrow } from \"../utility\";\nimport {\n  messagesFromTracker,\n  messagesToTracker,\n  TrackerMessageChannel,\n} from \"../collisionCanvas/collisionCanvasMessaging\";\nimport CollisionTrackerWorker from \"../collisionCanvas/collisionCanvas?worker\";\nimport { createWebWorkerMessageChannel } from \"../messaging/webWorkerMessageChannel\";\n\nexport type SnakeInput = {\n  id: string;\n  color: string;\n  onCollision: () => void;\n};\n\nconst frameTimeSixtyFps = 1000 / 60;\n\nexport type GameInput = Parameters<typeof snakeGameContext>[1];\n\nexport default function snakeGameContext(\n  canvas: HTMLCanvasElement | OffscreenCanvas,\n  {\n    snakeSpeed = 3.3,\n    lineWidth = 8,\n    turnRadius = 0.05,\n    startPositionSpread = 0.5,\n    startingHoleChancePercantage = -5,\n    holeDuration = 10,\n    maxVerticalResolution = 1080,\n    checkCollisions = true,\n    useTrackingCollisionCanvas = false,\n  } = {}\n) {\n  const context =\n    (canvas.getContext(\"2d\", {\n      desynchronized: true,\n      willReadFrequently: true,\n    }) as OffscreenCanvasRenderingContext2D) ??\n    inlineThrow(\"Could not get Snake canvas 2d context\");\n  const scaleFactor =\n    canvas.height > maxVerticalResolution\n      ? canvas.height / maxVerticalResolution\n      : 1;\n  context.scale(scaleFactor, scaleFactor);\n\n  const createNewSnake = (input: SnakeInput) => ({\n    ...input,\n    hasCollided: false,\n    turn: 0,\n    direction: Math.round(Math.random() * 360),\n    holeChance: startingHoleChancePercantage,\n    position: {\n      x:\n        (Math.random() + startPositionSpread) *\n        (context.canvas.width * startPositionSpread),\n      y:\n        (Math.random() + startPositionSpread) *\n        (context.canvas.height * startPositionSpread),\n    },\n    currentHoleSection: 0,\n    erasePos: null as null | { x: number; y: number },\n  });\n\n  const snakes: (ReturnType<typeof createNewSnake> & SnakeInput)[] = [];\n\n  //Create or update snake and return turntrigger\n  const inputSnakeData = (input: SnakeInput) => {\n    let snake = snakes.find((snake) => snake.id === input.id);\n    if (snake == null) {\n      snake = createNewSnake(input);\n      snakes.push(snake);\n    }\n    return (turn: number) => {\n      snake!.turn = turn;\n    };\n  };\n\n  //function for colliding and drawing snake\n  function moveSnake(\n    snake: typeof snakes[0],\n    snakeSpeed: number,\n    turnAngle: number,\n    checkCollision = false\n  ) {\n    if (snake.hasCollided) {\n      return;\n    }\n    if (snake.currentHoleSection == 0) {\n      if (snake.holeChance > 0 && Math.random() * 100 < snake.holeChance) {\n        snake.currentHoleSection = holeDuration;\n        snake.holeChance = startingHoleChancePercantage;\n      } else {\n        snake.holeChance = snake.holeChance + 0.1;\n      }\n    }\n\n    const willCollide =\n      checkCollision &&\n      (snake.position.x < 0 ||\n        snake.position.x > canvas.width ||\n        snake.position.y < 0 ||\n        snake.position.y > canvas.height ||\n        context.getImageData(\n          snake.position.x +\n            (snakeSpeed + lineWidth / 2) * Math.cos(snake.direction),\n          snake.position.y +\n            (snakeSpeed + lineWidth / 2) * Math.sin(snake.direction),\n          1,\n          1\n        ).data[3] !== 0);\n\n    if (willCollide) {\n      snake.hasCollided = true;\n      snake.onCollision();\n    }\n\n    if (snake.erasePos != null) {\n      context.beginPath();\n      context.lineCap = \"square\";\n      context.lineWidth = lineWidth + 3;\n      const prevCompOp = context.globalCompositeOperation;\n      context.globalCompositeOperation = \"destination-out\";\n      context.moveTo(snake.erasePos.x, snake.erasePos.y);\n      context.lineTo(snake.position.x, snake.position.y);\n      context.stroke();\n      context.closePath();\n      snake.erasePos = null;\n      context.globalCompositeOperation = prevCompOp;\n    }\n\n    if (snake.currentHoleSection > 0) {\n      snake.erasePos = { ...snake.position };\n      snake.currentHoleSection--;\n    }\n\n    context.beginPath();\n    context.lineCap = \"square\";\n    context.lineWidth = lineWidth;\n    context.strokeStyle = snake.color;\n    context.moveTo(snake.position.x, snake.position.y);\n    snake.direction += snake.turn * turnAngle;\n    snake.position.x += snakeSpeed * Math.cos(snake.direction);\n    snake.position.y += snakeSpeed * Math.sin(snake.direction);\n    context.lineTo(snake.position.x, snake.position.y);\n    context.stroke();\n    context.closePath();\n  }\n\n  //Setup tracker canvases\n  const trackers: {\n    channel: TrackerMessageChannel;\n    interval: number;\n    latestReport: number;\n  }[] = [];\n  function addTrackingChannel(\n    channel: TrackerMessageChannel,\n    interval: number,\n    //Collision reporting needs to be guarded from this side to disable hacking attempts.\n    reportsCollisions: boolean\n  ) {\n    channel.send(\"canvasInfo\", {\n      width: canvas.width,\n      height: canvas.height,\n      scaleFactor,\n      lineWidth,\n    });\n    trackers.push({ interval, channel, latestReport: 0 });\n    reportsCollisions &&\n      channel.on(\"reportCollision\", (id) => {\n        const snake = snakes.find((snake) => snake.id === id);\n        if (snake) {\n          snake.hasCollided = true;\n          snake.onCollision();\n        }\n      });\n  }\n\n  //Create collision canvas\n  const collisionCanvasWorker =\n    useTrackingCollisionCanvas &&\n    (() => {\n      const collisionCanvasWorker = new CollisionTrackerWorker();\n      collisionCanvasWorker.postMessage(\"SELF_HOST_CANVAS\");\n      const collisionTracker = createWebWorkerMessageChannel(\n        collisionCanvasWorker\n      )(messagesToTracker, messagesFromTracker);\n      addTrackingChannel(collisionTracker, 50, true);\n      return collisionCanvasWorker;\n    })();\n\n  let stopped = true;\n  function run() {\n    let timeStamp = performance.now();\n    let collisionCheckOdd = false;\n    function drawFrame(now: number) {\n      const frameTimeActual = now - timeStamp;\n      let frameTimeOffset = frameTimeActual / frameTimeSixtyFps;\n      //Don't skip too far if we're lagging.\n      frameTimeOffset = frameTimeOffset < 4 ? frameTimeOffset : 4;\n      const frameTimeSnakeSpeed = snakeSpeed * frameTimeOffset;\n      const frameTimeTurnRadius = turnRadius * frameTimeOffset;\n      timeStamp = now;\n      for (let index = 0; index < snakes.length; index++) {\n        moveSnake(\n          snakes[index],\n          frameTimeSnakeSpeed,\n          frameTimeTurnRadius,\n          checkCollisions && !!(index % 2) === collisionCheckOdd\n        );\n      }\n      collisionCheckOdd = !collisionCheckOdd;\n      \n      for (const tracker of trackers) {\n        //do not create redundant position data objects\n        let positionData = null;\n        if (now - tracker.latestReport >= tracker.interval) {\n          positionData ??= snakes\n            .filter((snake) => !snake.hasCollided)\n            .map((snake) => ({\n              id: snake.id,\n              fill: snake.currentHoleSection ? undefined : snake.color,\n              x: snake.position.x,\n              y: snake.position.y,\n            }));\n          tracker.channel.send(\"positionData\", positionData);\n        }\n      }\n      !stopped && requestAnimationFrame(drawFrame);\n    }\n    if (stopped) {\n      stopped = false;\n      requestAnimationFrame(drawFrame);\n    }\n  }\n  function stop() {\n    stopped = true;\n  }\n\n  return {\n    run,\n    stop,\n    inputSnakeData,\n    addTrackingChannel,\n    destroy() {\n      collisionCanvasWorker && collisionCanvasWorker.terminate();\n      stop();\n    },\n  };\n}\n","import React, { useRef, useEffect, CSSProperties, useState } from \"react\";\nimport snakeGameContext, { SnakeInput } from \"../gameCanvas/snakeGameContext\";\n\ntype Props = {\n  run: boolean;\n  input: (SnakeInput & {\n    onTurnInput(callBack: (turn: number) => void): void;\n  })[];\n  children?: React.ReactNode;\n};\n\nconst canvasStyle: CSSProperties = {\n  flexGrow: 1,\n  height: \"100%\",\n  width: \"100%\",\n};\nexport default function GameRound({ run, input, children }: Props) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [canvas, setCanvas] = useState<\n    PromiseResult<ReturnType<typeof createSnakeCanvas>>\n  >();\n\n  useEffect(() => {\n    if (canvasRef.current == null || canvas) {\n      return () =>\n        setCanvas((canvas) => {\n          canvas?.destroy();\n          return undefined;\n        });\n    }\n    createSnakeCanvas(canvasRef.current).then((canvas) => {\n      setCanvas(canvas);\n    });\n  }, [canvasRef.current]);\n\n  useEffect(() => {\n    if (canvas == null) {\n      return;\n    }\n    for (const snakeInput of input) {\n      const turner = canvas.inputSnakeData(snakeInput);\n      snakeInput.onTurnInput(turner);\n    }\n  }, [canvas, input]);\n\n  useEffect(() => {\n    if (canvas == null) {\n      return;\n    }\n    run ? canvas.run() : canvas.stop();\n  }, [canvas, run]);\n\n  return <canvas ref={canvasRef} style={canvasStyle} />;\n}\n\nasync function createSnakeCanvas(\n  canvas: HTMLCanvasElement,\n  {\n    maxVerticalResolution = 1080,\n    ...contextOptions\n  }: { maxVerticalResolution?: number } & Parameters<\n    typeof snakeGameContext\n  >[1] = {}\n) {\n  //Create scaled canvas for rendering\n  canvas.style.height = \"100%\";\n  canvas.style.width = \"100%\";\n  if (canvas.clientHeight > maxVerticalResolution) {\n    canvas.height = maxVerticalResolution;\n    canvas.width =\n      (maxVerticalResolution / canvas.clientHeight) * canvas.clientWidth;\n  } else {\n    canvas.height = canvas.clientHeight;\n    canvas.width = canvas.clientWidth;\n  }\n\n  //If possibly to create gamecontext offscreen, in seperate web-worker, do so. Otherwise initialize it directly.\n  const gameContext = await (\"OffscreenCanvas\" in window && false\n    ? //Load offscreen script lazily to delay worker instantion until necessary\n      (await import(\"../gameCanvas/offscreenGame\")).default\n    : snakeGameContext)(canvas, contextOptions);\n\n  return {\n    ...gameContext,\n    destroy() {\n      gameContext.destroy();\n    },\n  };\n}\n","//Started stripping https://gist.github.com/tupham81/a04d96cd48c8bcb8d4dc5301f3653937 to only support byte data, L error correction and only 0 mask.\n//Sort of gave up midway through.\nexport default function QR() {\n  var VERSIONS = [\n    [[]],\n    [[10, 7, 17, 13], [1, 1, 1, 1], []],\n    [\n      [16, 10, 28, 22],\n      [1, 1, 1, 1],\n      [4, 16],\n    ],\n    [\n      [26, 15, 22, 18],\n      [1, 1, 2, 2],\n      [4, 20],\n    ],\n    [\n      [18, 20, 16, 26],\n      [2, 1, 4, 2],\n      [4, 24],\n    ],\n    [\n      [24, 26, 22, 18],\n      [2, 1, 4, 4],\n      [4, 28],\n    ],\n    [\n      [16, 18, 28, 24],\n      [4, 2, 4, 4],\n      [4, 32],\n    ],\n    [\n      [18, 20, 26, 18],\n      [4, 2, 5, 6],\n      [4, 20, 36],\n    ],\n    [\n      [22, 24, 26, 22],\n      [4, 2, 6, 6],\n      [4, 22, 40],\n    ],\n    [\n      [22, 30, 24, 20],\n      [5, 2, 8, 8],\n      [4, 24, 44],\n    ],\n    [\n      [26, 18, 28, 24],\n      [5, 4, 8, 8],\n      [4, 26, 48],\n    ],\n    [\n      [30, 20, 24, 28],\n      [5, 4, 11, 8],\n      [4, 28, 52],\n    ],\n    [\n      [22, 24, 28, 26],\n      [8, 4, 11, 10],\n      [4, 30, 56],\n    ],\n    [\n      [22, 26, 22, 24],\n      [9, 4, 16, 12],\n      [4, 32, 60],\n    ],\n    [\n      [24, 30, 24, 20],\n      [9, 4, 16, 16],\n      [4, 24, 44, 64],\n    ],\n    [\n      [24, 22, 24, 30],\n      [10, 6, 18, 12],\n      [4, 24, 46, 68],\n    ],\n    [\n      [28, 24, 30, 24],\n      [10, 6, 16, 17],\n      [4, 24, 48, 72],\n    ],\n    [\n      [28, 28, 28, 28],\n      [11, 6, 19, 16],\n      [4, 28, 52, 76],\n    ],\n    [\n      [26, 30, 28, 28],\n      [13, 6, 21, 18],\n      [4, 28, 54, 80],\n    ],\n    [\n      [26, 28, 26, 26],\n      [14, 7, 25, 21],\n      [4, 28, 56, 84],\n    ],\n    [\n      [26, 28, 28, 30],\n      [16, 8, 25, 20],\n      [4, 32, 60, 88],\n    ],\n    [\n      [26, 28, 30, 28],\n      [17, 8, 25, 23],\n      [4, 26, 48, 70, 92],\n    ],\n    [\n      [28, 28, 24, 30],\n      [17, 9, 34, 23],\n      [4, 24, 48, 72, 96],\n    ],\n    [\n      [28, 30, 30, 30],\n      [18, 9, 30, 25],\n      [4, 28, 52, 76, 100],\n    ],\n    [\n      [28, 30, 30, 30],\n      [20, 10, 32, 27],\n      [4, 26, 52, 78, 104],\n    ],\n    [\n      [28, 26, 30, 30],\n      [21, 12, 35, 29],\n      [4, 30, 56, 82, 108],\n    ],\n    [\n      [28, 28, 30, 28],\n      [23, 12, 37, 34],\n      [4, 28, 56, 84, 112],\n    ],\n    [\n      [28, 30, 30, 30],\n      [25, 12, 40, 34],\n      [4, 32, 60, 88, 116],\n    ],\n    [\n      [28, 30, 30, 30],\n      [26, 13, 42, 35],\n      [4, 24, 48, 72, 96, 120],\n    ],\n    [\n      [28, 30, 30, 30],\n      [28, 14, 45, 38],\n      [4, 28, 52, 76, 100, 124],\n    ],\n    [\n      [28, 30, 30, 30],\n      [29, 15, 48, 40],\n      [4, 24, 50, 76, 102, 128],\n    ],\n    [\n      [28, 30, 30, 30],\n      [31, 16, 51, 43],\n      [4, 28, 54, 80, 106, 132],\n    ],\n    [\n      [28, 30, 30, 30],\n      [33, 17, 54, 45],\n      [4, 32, 58, 84, 110, 136],\n    ],\n    [\n      [28, 30, 30, 30],\n      [35, 18, 57, 48],\n      [4, 28, 56, 84, 112, 140],\n    ],\n    [\n      [28, 30, 30, 30],\n      [37, 19, 60, 51],\n      [4, 32, 60, 88, 116, 144],\n    ],\n    [\n      [28, 30, 30, 30],\n      [38, 19, 63, 53],\n      [4, 28, 52, 76, 100, 124, 148],\n    ],\n    [\n      [28, 30, 30, 30],\n      [40, 20, 66, 56],\n      [4, 22, 48, 74, 100, 126, 152],\n    ],\n    [\n      [28, 30, 30, 30],\n      [43, 21, 70, 59],\n      [4, 26, 52, 78, 104, 130, 156],\n    ],\n    [\n      [28, 30, 30, 30],\n      [45, 22, 74, 62],\n      [4, 30, 56, 82, 108, 134, 160],\n    ],\n    [\n      [28, 30, 30, 30],\n      [47, 24, 77, 65],\n      [4, 24, 52, 80, 108, 136, 164],\n    ],\n    [\n      [28, 30, 30, 30],\n      [49, 25, 81, 68],\n      [4, 28, 56, 84, 112, 140, 168],\n    ],\n  ];\n  var MODE_TERMINATOR = 0;\n  var MODE_OCTET = 4;\n  var GF256_MAP: number[] = [],\n    GF256_INVMAP = [-1];\n  for (var i = 0, v = 1; i < 255; ++i) {\n    GF256_MAP.push(v);\n    GF256_INVMAP[v] = i;\n    v = (v * 2) ^ (v >= 128 ? 0x11d : 0);\n  }\n  var GF256_GENPOLY: number[][] = [[]];\n  for (var i = 0; i < 30; ++i) {\n    var prevpoly = GF256_GENPOLY[i],\n      poly: number[] = [];\n    for (var j = 0; j <= i; ++j) {\n      var a = j < i ? GF256_MAP[prevpoly[j]] : 0;\n      var b = GF256_MAP[(i + (prevpoly[j - 1] || 0)) % 255];\n      poly.push(GF256_INVMAP[a ^ b]);\n    }\n    GF256_GENPOLY.push(poly);\n  }\n  var ALPHANUMERIC_MAP: Record<string, number> = {};\n  for (var i = 0; i < 45; ++i) {\n    ALPHANUMERIC_MAP[\n      \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\".charAt(i)\n    ] = i;\n  }\n  var needsverinfo = function (ver: number) {\n    return ver > 6;\n  };\n  var getsizebyver = function (ver: number) {\n    return 4 * ver + 17;\n  };\n  var nfullbits = function (ver: number) {\n    var v = VERSIONS[ver];\n    var nbits = 16 * ver * ver + 128 * ver + 64;\n    if (needsverinfo(ver)) {\n      nbits -= 36;\n    }\n    if (v[2].length) {\n      nbits -= 25 * v[2].length * v[2].length - 10 * v[2].length - 55;\n    }\n    return nbits;\n  };\n  var ndatabits = function (ver: number) {\n    var nbits = nfullbits(ver) & ~7;\n    var v = VERSIONS[ver];\n    nbits -= 8 * v[0][1] * v[1][1];\n    return nbits;\n  };\n  var ndatalenbits = (ver: number) => (ver < 10 ? 8 : 16);\n\n  var getmaxdatalen = function (ver: number) {\n    var nbits = ndatabits(ver) - 4 - ndatalenbits(ver);\n    return (nbits / 8) | 0;\n  };\n\n  var encode = function (\n    ver: number,\n    mode: number,\n    data: number[],\n    maxbuflen: number\n  ) {\n    var buf = [];\n    var bits = 0,\n      remaining = 8;\n    var datalen = data.length;\n    var pack = function (x: number, n: number) {\n      if (n >= remaining) {\n        buf.push(bits | (x >> (n -= remaining)));\n        while (n >= 8) {\n          buf.push((x >> (n -= 8)) & 255);\n        }\n        bits = 0;\n        remaining = 8;\n      }\n      if (n > 0) {\n        bits |= (x & ((1 << n) - 1)) << (remaining -= n);\n      }\n    };\n    var nlenbits = ndatalenbits(ver);\n    pack(mode, 4);\n    pack(datalen, nlenbits);\n    for (var i = 0; i < datalen; ++i) {\n      pack(data[i], 8);\n    }\n    pack(MODE_TERMINATOR, 4);\n    if (remaining < 8) {\n      buf.push(bits);\n    }\n    while (buf.length + 1 < maxbuflen) {\n      buf.push(0xec, 0x11);\n    }\n    if (buf.length < maxbuflen) {\n      buf.push(0xec);\n    }\n    return buf;\n  };\n  var calculateecc = function (poly: number[], genpoly: number[]) {\n    var modulus = poly.slice(0);\n    var polylen = poly.length,\n      genpolylen = genpoly.length;\n    for (var k = 0; k < genpolylen; ++k) {\n      modulus.push(0);\n    }\n    for (var i = 0; i < polylen; ) {\n      var quotient = GF256_INVMAP[modulus[i++]];\n      if (quotient >= 0) {\n        for (var j = 0; j < genpolylen; ++j) {\n          modulus[i + j] ^= GF256_MAP[(quotient + genpoly[j]) % 255];\n        }\n      }\n    }\n    return modulus.slice(polylen);\n  };\n  var augumenteccs = function (\n    poly: number[],\n    nblocks: number,\n    genpoly: number[]\n  ) {\n    var subsizes = [];\n    var subsize = (poly.length / nblocks) | 0,\n      subsize0 = 0;\n    var pivot = nblocks - (poly.length % nblocks);\n    for (var i = 0; i < pivot; ++i) {\n      subsizes.push(subsize0);\n      subsize0 += subsize;\n    }\n    for (var i = pivot; i < nblocks; ++i) {\n      subsizes.push(subsize0);\n      subsize0 += subsize + 1;\n    }\n    subsizes.push(subsize0);\n    var eccs = [];\n    for (var i = 0; i < nblocks; ++i) {\n      eccs.push(\n        calculateecc(poly.slice(subsizes[i], subsizes[i + 1]), genpoly)\n      );\n    }\n    var result = [];\n    var nitemsperblock = (poly.length / nblocks) | 0;\n    for (var i = 0; i < nitemsperblock; ++i) {\n      for (var j = 0; j < nblocks; ++j) {\n        result.push(poly[subsizes[j] + i]);\n      }\n    }\n    for (var j = pivot; j < nblocks; ++j) {\n      result.push(poly[subsizes[j + 1] - 1]);\n    }\n    for (var i = 0; i < genpoly.length; ++i) {\n      for (var j = 0; j < nblocks; ++j) {\n        result.push(eccs[j][i]);\n      }\n    }\n    return result;\n  };\n  var augumentbch = function (\n    poly: number,\n    p: number,\n    genpoly: number,\n    q: number\n  ) {\n    var modulus = poly << q;\n    for (var i = p - 1; i >= 0; --i) {\n      if ((modulus >> (q + i)) & 1) {\n        modulus ^= genpoly << i;\n      }\n    }\n    return (poly << q) | modulus;\n  };\n  var makebasematrix = function (ver: number) {\n    var v = VERSIONS[ver],\n      n = getsizebyver(ver);\n    var matrix: number[][] = [],\n      reserved: number[][] = [];\n    for (var i = 0; i < n; ++i) {\n      matrix.push([]);\n      reserved.push([]);\n    }\n    var blit = function (\n      y: number,\n      x: number,\n      h: number,\n      w: number,\n      bits: number[]\n    ) {\n      for (var i = 0; i < h; ++i) {\n        for (var j = 0; j < w; ++j) {\n          matrix[y + i][x + j] = (bits[i] >> j) & 1;\n          reserved[y + i][x + j] = 1;\n        }\n      }\n    };\n    blit(0, 0, 9, 9, [0x7f, 0x41, 0x5d, 0x5d, 0x5d, 0x41, 0x17f, 0x00, 0x40]);\n    blit(n - 8, 0, 8, 9, [0x100, 0x7f, 0x41, 0x5d, 0x5d, 0x5d, 0x41, 0x7f]);\n    blit(\n      0,\n      n - 8,\n      9,\n      8,\n      [0xfe, 0x82, 0xba, 0xba, 0xba, 0x82, 0xfe, 0x00, 0x00]\n    );\n    for (var i = 9; i < n - 8; ++i) {\n      matrix[6][i] = matrix[i][6] = ~i & 1;\n      reserved[6][i] = reserved[i][6] = 1;\n    }\n    var aligns = v[2],\n      m = aligns.length;\n    for (var i = 0; i < m; ++i) {\n      var minj = i === 0 || i === m - 1 ? 1 : 0,\n        maxj = i === 0 ? m - 1 : m;\n      for (var j = minj; j < maxj; ++j) {\n        blit(aligns[i], aligns[j], 5, 5, [0x1f, 0x11, 0x15, 0x11, 0x1f]);\n      }\n    }\n    if (needsverinfo(ver)) {\n      var code = augumentbch(ver, 6, 0x1f25, 12);\n      var k = 0;\n      for (var i = 0; i < 6; ++i) {\n        for (var j = 0; j < 3; ++j) {\n          matrix[i][n - 11 + j] = matrix[n - 11 + j][i] = (code >> k++) & 1;\n          reserved[i][n - 11 + j] = reserved[n - 11 + j][i] = 1;\n        }\n      }\n    }\n    return {\n      matrix: matrix,\n      reserved: reserved,\n    };\n  };\n  var putdata = function (\n    matrix: number[][],\n    reserved: number[][],\n    buf: number[]\n  ) {\n    var n = matrix.length;\n    var k = 0,\n      dir = -1;\n    for (var i = n - 1; i >= 0; i -= 2) {\n      if (i === 6) {\n        --i;\n      }\n      var jj = dir < 0 ? n - 1 : 0;\n      for (var j = 0; j < n; ++j) {\n        for (var ii = i; ii > i - 2; --ii) {\n          if (!reserved[jj][ii]) {\n            matrix[jj][ii] = (buf[k >> 3] >> (~k & 7)) & 1;\n            ++k;\n          }\n        }\n        jj += dir;\n      }\n      dir = -dir;\n    }\n    return matrix;\n  };\n  var maskdata = function (matrix: number[][], reserved: number[][]) {\n    var maskf = (i: number, j: number) => (i + j) % 2 === 0;\n    var n = matrix.length;\n    for (var i = 0; i < n; ++i) {\n      for (var j = 0; j < n; ++j) {\n        if (!reserved[i][j]) {\n          //@ts-ignore\n          matrix[i][j] ^= maskf(i, j);\n        }\n      }\n    }\n    return matrix;\n  };\n  var putformatinfo = function (matrix: number[][], ecclevel: number) {\n    var n = matrix.length;\n    var code = augumentbch((ecclevel << 3) | 0, 5, 0x537, 10) ^ 0x5412;\n    for (var i = 0; i < 15; ++i) {\n      var r = [\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        7,\n        8,\n        n - 7,\n        n - 6,\n        n - 5,\n        n - 4,\n        n - 3,\n        n - 2,\n        n - 1,\n      ][i];\n      var c = [\n        n - 1,\n        n - 2,\n        n - 3,\n        n - 4,\n        n - 5,\n        n - 6,\n        n - 7,\n        n - 8,\n        7,\n        5,\n        4,\n        3,\n        2,\n        1,\n        0,\n      ][i];\n      matrix[r][8] = matrix[8][c] = (code >> i) & 1;\n    }\n    return matrix;\n  };\n  var generate = function (data: number[], ver: number) {\n    var v = VERSIONS[ver];\n    var buf = encode(ver, MODE_OCTET, data, ndatabits(ver) >> 3);\n    buf = augumenteccs(buf, v[1][1], GF256_GENPOLY[v[0][1]]);\n    var result = makebasematrix(ver);\n    var matrix = result.matrix,\n      reserved = result.reserved;\n    putdata(matrix, reserved, buf);\n    maskdata(matrix, reserved);\n    putformatinfo(matrix, 1);\n    return matrix;\n  };\n  var QRCode = {\n    generate: function (source: string) {\n      const data = new TextEncoder().encode(source);\n      let ver = 1;\n      for (ver = 1; ver <= 40; ++ver) {\n        if (data.length <= getmaxdatalen(ver)) {\n          break;\n        }\n      }\n      //@ts-ignore UINtarray is fine\n      return generate(data, ver);\n    },\n    writeToCanvas: function (\n      source: string,\n      canvas: HTMLCanvasElement,\n      {\n        fillColor = \"#FFFFFF\",\n        textColor = \"#000000\",\n        margin = 1.5,\n        modSize = 10,\n      } = {}\n    ) {\n      var matrix = QRCode[\"generate\"](source);\n      var n = matrix.length;\n      var size = modSize * (n + 2 * margin);\n      canvas.width = canvas.height = size;\n      const context = canvas.getContext(\"2d\");\n      if (context == null) {\n        throw new Error(\"Could not get context from canvas\");\n      }\n      context.fillStyle = fillColor;\n      context.fillRect(0, 0, size, size);\n      context.fillStyle = textColor;\n      context.imageSmoothingEnabled = false;\n      for (var i = 0; i < n; ++i) {\n        for (var j = 0; j < n; ++j) {\n          if (matrix[i][j]) {\n            context.fillRect(\n              modSize * (margin + j),\n              modSize * (margin + i),\n              modSize,\n              modSize\n            );\n          }\n        }\n      }\n    },\n  };\n  return QRCode;\n}\n","import QR from \"../qr\";\nimport React, { useEffect, useRef } from \"react\";\ntype Props = {\n  style?: React.CSSProperties;\n  colorScheme?: \"onDarkBg\" | \"onWhiteBg\";\n  padding?: number;\n  children: string;\n};\n\nexport default function QrCode({ children, style }: Props) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  useEffect(() => {\n    canvasRef.current &&\n      children &&\n      QR().writeToCanvas(children, canvasRef.current);\n  }, [canvasRef.current, children]);\n  return <canvas style={style} ref={canvasRef} />;\n}\n","import React, { CSSProperties, useEffect, useState } from \"react\";\nimport Layout from \"./Layout\";\nimport QrCode from \"./QrCode\";\n\ntype Props = {\n  url: string;\n  players: { id: string; name: string; color: string; ready: boolean }[];\n};\n\nconst verticalFlex: CSSProperties = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  alignItems: \"start\",\n};\n\nexport default function Waiting({ url, players }: Props) {\n  return (\n    <Layout style={{ justifyContent: \"space-around\" }}>\n      <div />\n      <div\n        style={{\n          width: \"40%\",\n        }}\n      >\n        <QrCode\n          colorScheme=\"onWhiteBg\"\n          padding={2}\n          style={{\n            width: \"100%\",\n            margin: \"0 auto 2em auto\",\n          }}\n        >\n          {url}\n        </QrCode>\n        <a\n          href={url}\n          style={{\n            textAlign: \"center\",\n            display: \"block\",\n            fontSize: \"0.8em\",\n            marginTop: \"0.8em\",\n            alignSelf: \"center\",\n          }}\n        >\n          {url}\n        </a>\n      </div>\n      <div\n        style={{\n          ...verticalFlex,\n          width: 0,\n          flexGrow: players.length ? 0.5 : 0,\n          transition: \"flex-grow 500ms ease-in\",\n        }}\n      >\n        {players.map((player) => (\n          <PlayerItem key={player.id} {...player} />\n        ))}\n      </div>\n    </Layout>\n  );\n}\n\nconst PlayerItem = (player: Props[\"players\"][0]) => {\n  const [rendered, setRendered] = useState(false);\n  useEffect(() => {\n    window.setTimeout(() => setRendered(true), 100);\n  }, []);\n  return (\n    <div\n      style={{\n        opacity: rendered ? 1 : 0,\n        margin: \"1.2em 0\",\n        transition: \"transform 150ms ease-in, opacity 150ms ease-in\",\n        transform: player.ready ? \"scale(1.1) translateX(5%)\" : undefined,\n        animation: \"fadeIn 250ms ease-in, fromRight 500ms ease-in\",\n        minWidth: \"7em\",\n      }}\n      key={player.id}\n    >\n      <h2\n        style={{\n          color: player.color,\n          fontSize: \"3em\",\n          transition: \"color 150ms\",\n          whiteSpace: \"nowrap\",\n        }}\n      >\n        {player.name} {player.ready ? <small>👍</small> : \"  \"}\n      </h2>\n    </div>\n  );\n};\n","import React, {\n  createContext,\n  SetStateAction,\n  Dispatch,\n  PropsWithChildren,\n} from \"react\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\n\nconst defaultSettings = {\n  snakeSpeed: 3.3,\n  lineWidth: 8,\n  turnRadius: 0.05,\n  startPositionSpread: 0.5,\n  startingHoleChancePercantage: -5,\n  holeDuration: 10,\n  maxVerticalResolution: 1080,\n};\n\nexport type GameSettings = typeof defaultSettings;\n\nexport const GameSettingsContext = createContext([\n  defaultSettings,\n  (() => {}) as Dispatch<SetStateAction<GameSettings>>,\n] as const);\n\nexport function GameSettingsProvider({ children }: PropsWithChildren<{}>) {\n  const state = useLocalStorage(\"gameSettings\", defaultSettings);\n  return (\n    <GameSettingsContext.Provider value={state}>\n      {children}\n    </GameSettingsContext.Provider>\n  );\n}\n","import { useMemo, useState, useEffect } from \"react\";\n\nexport default function useLocalStorage<T>(\n  localStorageKey: string,\n  defaultValue: T\n) {\n  //Memo localstorage and json parse, could be expensive in browser\n  const startingValue = useMemo(\n    () =>\n      localStorage?.[localStorageKey]\n        ? JSON.parse(localStorage[localStorageKey])\n        : defaultValue,\n    []\n  );\n  const [state, setState] = useState<T>(startingValue);\n  useEffect(() => {\n    localStorage && (localStorage[localStorageKey] = JSON.stringify(state));\n  }, [state]);\n  return [state, setState] as const;\n}\n","import React from \"react\";\nimport { ALL_COLORS } from \"../constants\";\nimport { LobbyPlayer } from \"../hooks/useStateForLobby\";\nimport QrCode from \"./QrCode\";\n\nexport default function Scoreboard({\n  players,\n  url,\n}: {\n  players: LobbyPlayer[];\n  url: string;\n}) {\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        zIndex: -1,\n        right: 0,\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        height: \"100%\",\n      }}\n    >\n      <div\n        style={{\n          flexGrow: 1,\n          display: \"flex\",\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n          alignItems: \"flex-end\",\n        }}\n      >\n        {players.map((player) => (\n          <div\n            key={player.id}\n            style={{\n              color: player.color,\n              textAlign: \"right\",\n              margin: \"0 1.5em\",\n              paddingBottom: \"2em\",\n            }}\n          >\n            <div style={{ fontSize: \"5.2em\" }}>{player.score}</div>\n            <div style={{ fontSize: \"1.2em\", whiteSpace: \"nowrap\" }}>\n              {player.name}\n            </div>\n          </div>\n        ))}\n      </div>\n      {ALL_COLORS.length > players.length && (\n        <QrCode\n          colorScheme=\"onWhiteBg\"\n          padding={2}\n          style={{\n            width: 150,\n            height: 150,\n            margin: \"2em\",\n          }}\n        >\n          {url}\n        </QrCode>\n      )}\n    </div>\n  );\n}\n","import React, { useEffect, useState, useMemo } from \"react\";\nimport useLobbyConnection from \"../hooks/useConnectionForLobby\";\nimport useStateForLobby, { LobbyPlayer } from \"../hooks/useStateForLobby\";\nimport Banger from \"./Banger\";\nimport GameRound from \"./GameRound\";\nimport Layout from \"./Layout\";\nimport Waiting from \"./Waiting\";\nimport { GameSettingsProvider } from \"./GameSettingsContext\";\nimport Scoreboard from \"./Scoreboard\";\n\ntype PlayerInfo = Pick<LobbyPlayer, \"color\" | \"name\">;\n\ntype GameState =\n  | { type: \"lobby\" }\n  | {\n      type: \"intermission\";\n      roundWinner?: PlayerInfo;\n      gameWinner?: PlayerInfo;\n      remainingTime: number;\n    }\n  | { type: \"playing\"; running: boolean; joinedPlayerIds: string[] };\n\nconst createIntermission = (\n  roundWinner?: PlayerInfo,\n  gameWinner?: PlayerInfo\n): GameState => ({\n  type: \"intermission\",\n  remainingTime: 5,\n  roundWinner,\n  gameWinner,\n});\n\nexport default function Lobby({ lobbyName }: { lobbyName: string }) {\n  const [socketStatus, connections] = useLobbyConnection(lobbyName);\n  const [players, gameState] = useStateForLobby(connections);\n  if (socketStatus === \"connecting\") {\n    return (\n      <Banger style={{ animation: \"fadeIn 300ms 750ms both\" }}>\n        Signaling server is <span style={{ color: \"yellow\" }}>warming</span> up.{\" \"}\n        <br />\n        <small style={{ fontSize: \"0.5em\" }}>\n          This while take a while <br /> (free tier hosting)\n        </small>\n      </Banger>\n    );\n  }\n  if (socketStatus === \"failed\") {\n    return (\n      <Banger>\n        Signaling server connection <span style={{ color: \"red\" }}>failed</span>{\" \"}\n      </Banger>\n    );\n  }\n  return (\n    <GameSettingsProvider>\n      <Game\n        lobbyName={lobbyName}\n        players={players}\n        allowSinglePlayer={gameState.allowSinglePlayer}\n      />\n    </GameSettingsProvider>\n  );\n}\n\nexport function Game({\n  lobbyName,\n  allowSinglePlayer = false,\n  players,\n}: {\n  lobbyName: string;\n  players: LobbyPlayer[];\n  allowSinglePlayer: boolean;\n}) {\n  const [gameState, setGameState] = useState<GameState>({ type: \"lobby\" });\n\n  const winningScore = useMemo(\n    () => (players.length || 1) * 5,\n    [players.length]\n  );\n\n  //Tick down intermissions to next round\n  useEffect(() => {\n    if (gameState.type !== \"intermission\") {\n      return;\n    }\n    if (gameState.remainingTime) {\n      const timeout = setTimeout(() => {\n        setGameState({\n          ...gameState,\n          remainingTime: gameState.remainingTime - 1,\n        });\n        return () => clearTimeout(timeout);\n      }, 1000);\n    } else {\n      //Start next round\n      setGameState({\n        type: \"playing\",\n        running: true,\n        joinedPlayerIds: players\n          .filter((player) => player.ready)\n          .map((player) => {\n            player.setState(\"playing\");\n            return player.id;\n          }),\n      });\n    }\n  }, [gameState]);\n\n  //Player join effect\n  useEffect(() => {\n    //if all players ready when in lobby, start game\n    if (\n      gameState.type === \"lobby\" &&\n      players.length &&\n      (players.length > 1 || allowSinglePlayer) &&\n      players.every((player) => player.ready)\n    ) {\n      setGameState(createIntermission());\n    }\n    //Go back to lobby, if no ready players are joined.\n    if (gameState.type !== \"lobby\" && !players.some((player) => player.ready)) {\n      setGameState({ type: \"lobby\" });\n    }\n  }, [players, gameState.type]);\n\n  //Group all joined and alive players\n  const playersInGame = useMemo(() => {\n    if (gameState.type !== \"playing\") {\n      return null;\n    }\n    const joined = players.filter((player) =>\n      gameState.joinedPlayerIds.includes(player.id)\n    );\n    return {\n      joined,\n      alive: joined.filter((otherPlayer) => otherPlayer.state === \"playing\"),\n    };\n  }, [gameState.type, players]);\n\n  //Finish ongoing round if someone won or no ones alive or playing\n  useEffect(() => {\n    if (!playersInGame) {\n      return;\n    }\n    const aliveCount = playersInGame.alive.length;\n    //Allow one player to skrrrt around without declaring them victor.\n    const isOneAliveButSinglePlayer =\n      aliveCount === 1 && playersInGame.joined.length === 1;\n    if (aliveCount <= 1 && !isOneAliveButSinglePlayer) {\n      //We have a winner!\n      setGameState((state) => ({ ...state, running: false }));\n      const playerWithMaxScore = playersInGame.joined.reduce(\n        (maxPlayer, player) =>\n          player.score > (maxPlayer?.score ?? 0) ? player : maxPlayer,\n        null as LobbyPlayer | null\n      );\n      window.setTimeout(() => {\n        setGameState((state) =>\n          state.type === \"playing\"\n            ? createIntermission(\n                playersInGame.alive[0] ?? { color: \"inherit\", name: \"Nobody\" },\n                (playerWithMaxScore?.score ?? 0) > winningScore\n                  ? (playerWithMaxScore as LobbyPlayer)\n                  : undefined\n              )\n            : state\n        );\n      }, 1000);\n    }\n  }, [playersInGame]);\n\n  //When someone crashes, set state to that player as crashed and give everyone else a score.\n  const onSnakeDeath = (player: LobbyPlayer) => {\n    if (playersInGame == null) {\n      return;\n    }\n    player.setState(\"dead\");\n    playersInGame.alive\n      .filter((p) => p.id !== player.id)\n      .forEach((otherPlayer) => otherPlayer.setScore(otherPlayer.score + 1));\n  };\n\n  //Create new input for game when players changes.\n  const gameInput = useMemo(\n    () =>\n      gameState.type === \"playing\"\n        ? players\n            .filter((player) => gameState.joinedPlayerIds.includes(player.id))\n            .map((player) => ({\n              id: player.id,\n              color: player.color,\n              onCollision: () => onSnakeDeath(player),\n              onTurnInput: player.onTurnInput,\n            }))\n        : [],\n    [gameState.type, players]\n  );\n\n  const url = `${window.location.protocol}//${window.location.host}${window.location.pathname}#${lobbyName}`;\n  switch (gameState.type) {\n    case \"lobby\": {\n      return <Waiting players={players} url={url} />;\n    }\n    case \"playing\": {\n      return (\n        <Layout>\n          <GameRound input={gameInput} run={gameState.running} />\n          <Scoreboard players={players} url={url} />\n        </Layout>\n      );\n    }\n    case \"intermission\": {\n      const intermissionMessage =\n        gameState.gameWinner != null ? (\n          <Banger>\n            <span style={{ color: gameState.gameWinner.color }}>\n              {gameState.gameWinner.name}\n            </span>{\" \"}\n            wins the game!\n          </Banger>\n        ) : gameState.remainingTime <= 3 ? (\n          <Banger key=\"countdown\">\n            {gameState.roundWinner ? \"Next round\" : \"Game starts\"} in{\" \"}\n            <span style={{ width: \"1em\", display: \"inline-block\" }}>\n              {gameState.remainingTime}\n            </span>\n          </Banger>\n        ) : gameState.roundWinner ? (\n          <Banger>\n            <span\n              style={{\n                color: gameState.roundWinner.color,\n              }}\n            >\n              {gameState.roundWinner.name}\n            </span>{\" \"}\n            survives\n          </Banger>\n        ) : (\n          <Banger>Get ready</Banger>\n        );\n      return (\n        <Layout key={gameState.remainingTime > 3 ? \"message\" : \"countdown\"}>\n          {intermissionMessage}\n        </Layout>\n      );\n    }\n  }\n}\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { DEFAULT_RTC_PEER_CONFIG, SIGNALING_URL } from \"../constants\";\nimport {\n  createMessageChannelToPlayer,\n  MessageChannelToPlayer,\n} from \"../messaging/dataChannelMessaging\";\nimport useJsonWebsocket from \"./useJsonWebsocket\";\n\nexport type PlayerConnections = {\n  [id: string]: MessageChannelToPlayer;\n};\n\nexport default function useLobbyConnection(lobbyName: string) {\n  const [clientConnections, setClientConnections] = useState<{\n    [id: string]: [RTCPeerConnection, MessageChannelToPlayer];\n  }>({});\n\n  const socket = useJsonWebsocket(`${SIGNALING_URL}/${lobbyName}`);\n\n  const removeStaleConnection = useCallback(\n    (staleConnection: RTCPeerConnection) => {\n      setClientConnections((connections) =>\n        Object.keys(connections).reduce((acc, key) => {\n          if (connections[key]?.[0] !== staleConnection) {\n            acc[key] = connections[key];\n          } else {\n            try {\n              connections[key][1].destroy();\n            } catch (err) {\n              console.error(\"Error cleaning up stale connection\", err);\n            }\n          }\n          return acc;\n        }, {} as typeof clientConnections)\n      );\n    },\n    [setClientConnections]\n  );\n\n  useEffect(() => {\n    if (socket.status !== \"connected\") {\n      return;\n    }\n\n    const unbindSocketListener = socket.addListener(\n      async ({ from: offerFrom, data }) => {\n        if (data.type !== \"offer\" || offerFrom == null) {\n          return;\n        }\n        const clientConnection = new RTCPeerConnection(DEFAULT_RTC_PEER_CONFIG);\n\n        clientConnection.onicecandidate = (event) =>\n          event.candidate != null &&\n          socket.send({\n            to: offerFrom,\n            data: event.candidate.toJSON(),\n          });\n        const unbindPeerSignaling = socket.addListener(\n          ({ from: candidateFrom, data }) =>\n            candidateFrom === offerFrom &&\n            \"candidate\" in data &&\n            clientConnection.addIceCandidate(data)\n        );\n        const closeConnection = () => {\n          unbindPeerSignaling?.();\n          removeStaleConnection(clientConnection);\n        };\n        clientConnection.ondatachannel = ({ channel }: RTCDataChannelEvent) => {\n          channel.onclose = closeConnection;\n          setClientConnections((connections) => ({\n            ...connections,\n            [offerFrom]: [\n              clientConnection,\n              createMessageChannelToPlayer(clientConnection, channel),\n            ],\n          }));\n        };\n        clientConnection.onconnectionstatechange = () => {\n          const state = clientConnection.connectionState;\n          if (state == \"disconnected\") {\n            closeConnection();\n          }\n        };\n        await clientConnection.setRemoteDescription(\n          new RTCSessionDescription(data)\n        );\n        const localDescription = await clientConnection.createAnswer();\n        await clientConnection.setLocalDescription(localDescription);\n        socket.send({ data: localDescription, to: offerFrom });\n      }\n    );\n    return unbindSocketListener;\n  }, [socket]);\n\n  const playerConnections = useMemo(\n    () =>\n      Object.entries(clientConnections).reduce((acc, [key, value]) => {\n        acc[key] = value[1];\n        return acc;\n      }, {} as PlayerConnections),\n    [clientConnections]\n  );\n\n  return [socket.status, playerConnections] as const;\n}\n"],"names":["effect","deps","dependencyRef","useRef","prevDeps","current","getColorAvailability","assignedColors","ALL_COLORS","reduce","acc","color","indexOf","clientConnections","playerStates","setPlayerState","useState","gameState","setGameState","colorAvailability","allowSinglePlayer","prevConnections","playerStates2","connectionKeys","Object","keys","disconnectingPlayers","filter","id","includes","map","disconnectId","timeout","__spreadProps","window","setTimeout","_a2","_removePlayer","_b","__restKey","player","updatedColorAvailability","queuespot","connectedPlayers","connKey","index","prevPlayerState","modifyPlayer","playerKey","fn","_a","otherPlayers","playerState","__spreadValues","assignedColor","entries","find","_color","avail","name","ready","score","state","latency","setState","setScore","onTurnInput","turner","on","send","reason","currentConnection","bindMessageToStateKey","eventName","modifier","keyName","data","old","values","gameState2","join","prevClientConnections","prevPlayerStates","forEach","key","newState","oldState","extractObjectDiff","prevGameState","stateUpdate","currentConn","useMemo","canvas","snakeSpeed","lineWidth","turnRadius","startPositionSpread","startingHoleChancePercantage","holeDuration","maxVerticalResolution","checkCollisions","useTrackingCollisionCanvas","context","getContext","desynchronized","willReadFrequently","inlineThrow","scaleFactor","height","scale","snakes","snake","snakeSpeed2","turnAngle","checkCollision","hasCollided","currentHoleSection","holeChance","Math","random","position","x","width","y","getImageData","cos","direction","sin","onCollision","erasePos","beginPath","lineCap","prevCompOp","globalCompositeOperation","moveTo","lineTo","stroke","closePath","strokeStyle","turn","trackers","channel","interval","reportsCollisions","push","latestReport","snake2","collisionCanvasWorker","collisionCanvasWorker2","CollisionTrackerWorker","postMessage","createWebWorkerMessageChannel","messagesToTracker","messagesFromTracker","stopped","run","timeStamp","performance","now","collisionCheckOdd","frameTimeOffset","frameTimeSnakeSpeed","frameTimeTurnRadius","length","tracker","positionData","fill","requestAnimationFrame","drawFrame","stop","inputSnakeData","input","round","createNewSnake","addTrackingChannel","[object Object]","terminate","canvasStyle","flexGrow","children","canvasRef","setCanvas","canvas2","destroy","async","contextOptions","style","clientHeight","clientWidth","gameContext","snakeGameContext","then","snakeInput","ref","VERSIONS","GF256_MAP","GF256_INVMAP","i","v","GF256_GENPOLY","prevpoly","poly","j","a","b","needsverinfo","ver","ndatabits","nbits","v2","nfullbits","ndatalenbits","getmaxdatalen","calculateecc","poly2","genpoly","modulus","slice","polylen","genpolylen","k","i2","quotient","j2","augumentbch","p2","q","generate","buf","mode","maxbuflen","bits","remaining","datalen","pack","n","nlenbits","encode","nblocks","subsizes","subsize","subsize0","pivot","eccs","result","nitemsperblock","augumenteccs","getsizebyver","matrix","reserved","blit","h2","w","i3","j3","aligns","m","maxj","code","makebasematrix","dir","jj","ii","ecclevel","c","QRCode","source","TextEncoder","writeToCanvas","fillColor","textColor","margin","modSize","size","Error","fillStyle","fillRect","imageSmoothingEnabled","QR","verticalFlex","display","flexDirection","justifyContent","alignItems","url","players","Layout","QrCode","colorScheme","padding","href","textAlign","fontSize","marginTop","alignSelf","transition","PlayerItem","rendered","setRendered","opacity","transform","animation","minWidth","whiteSpace","defaultSettings","GameSettingsContext","createContext","localStorageKey","defaultValue","startingValue","JSON","parse","localStorage","stringify","useLocalStorage","Provider","value","zIndex","right","paddingBottom","createIntermission","roundWinner","gameWinner","type","remainingTime","lobbyName","socketStatus","connections","setClientConnections","socket","useJsonWebsocket","SIGNALING_URL","removeStaleConnection","useCallback","staleConnection","err","error","status","addListener","from","offerFrom","clientConnection","RTCPeerConnection","DEFAULT_RTC_PEER_CONFIG","onicecandidate","event","candidate","to","toJSON","unbindPeerSignaling","candidateFrom","data2","addIceCandidate","closeConnection","ondatachannel","onclose","createMessageChannelToPlayer","onconnectionstatechange","connectionState","setRemoteDescription","RTCSessionDescription","localDescription","createAnswer","setLocalDescription","playerConnections","useLobbyConnection","useStateForLobby","Banger","GameSettingsProvider","Game","winningScore","clearTimeout","running","joinedPlayerIds","every","some","playersInGame","joined","alive","otherPlayer","aliveCount","isOneAliveButSinglePlayer","playerWithMaxScore","maxPlayer","gameInput","onSnakeDeath","location","protocol","host","pathname","Waiting","GameRound","Scoreboard","intermissionMessage"],"mappings":"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"}