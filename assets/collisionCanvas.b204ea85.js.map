{"version":3,"file":"collisionCanvas.b204ea85.js","sources":["../../src/collisionCanvas/collisionCanvas.tsx"],"sourcesContent":["/// <reference lib=\"WebWorker\" />\nimport { BindableMessageChannel } from \"../messaging/setupMessageChannel\";\nimport { createWebWorkerMessageChannel } from \"../messaging/webWorkerMessageChannel\";\nimport { inlineThrow } from \"../utility\";\nimport {\n  messagesFromTracker,\n  messagesToTracker,\n} from \"./collisionCanvasMessaging\";\n\ntype Point = { x: number; y: number };\n\nfunction createTrackerCanvas(\n  canvas: HTMLCanvasElement | OffscreenCanvas,\n  channelCreator: BindableMessageChannel,\n  checkCollisions: boolean\n) {\n  const channel = channelCreator(messagesFromTracker, messagesToTracker);\n  const context =\n    canvas.getContext(\"2d\") ??\n    inlineThrow(\"Could not get context of tracker canvas\");\n  let lineWidth = 0;\n  channel.on(\"canvasInfo\", (info) => {\n    canvas.height = info.height;\n    canvas.width = info.width;\n    context.scale(info.scaleFactor, info.scaleFactor);\n    lineWidth = info.lineWidth;\n  });\n  const prevPositions: Record<string, Point> = {};\n  channel.on(\"positionData\", (data) => {\n    data.forEach((pos) => {\n      const prevPos = prevPositions[pos.id];\n      prevPositions[pos.id] = { x: pos.x, y: pos.y };\n      const futurePos =\n        prevPos != null &&\n        !(prevPos.x === pos.x && prevPos.y === pos.y) &&\n        getUpcomingPosition(prevPos, pos);\n      if (\n        checkCollisions &&\n        (pos.x < 0 ||\n          pos.x > canvas.width ||\n          pos.y < 0 ||\n          pos.y > canvas.height ||\n          (futurePos &&\n            context.getImageData(futurePos.x, futurePos.y, 1, 1).data[3] !== 0))\n      ) {\n        //Position is collision\n        channel.send(\"reportCollision\", pos.id);\n      }\n      if (!pos.fill || prevPos == null) {\n        return;\n      }\n      //Draw new position\n      context.beginPath();\n      context.lineCap = \"square\";\n      context.lineWidth = lineWidth;\n      context.strokeStyle = pos.fill;\n      context.moveTo(prevPos.x, prevPos.y);\n      context.lineTo(pos.x, pos.y);\n      context.stroke();\n      context.closePath();\n      prevPos.x = pos.x;\n      prevPos.y = pos.y;\n    });\n  });\n}\n\nconst getUpcomingPosition = (prevPos: Point, currentPos: Point) => {\n  const length = Math.sqrt(\n    Math.pow(prevPos.x - currentPos.x, 2) +\n      Math.pow(prevPos.y - currentPos.y, 2)\n  );\n  return {\n    x: currentPos.x + ((currentPos.x - prevPos.x) / length) * 3,\n    y: currentPos.y + ((currentPos.y - prevPos.y) / length) * 3,\n  };\n};\n\nself.addEventListener(\n  \"message\",\n  function initialMessageHandler(ev: MessageEvent) {\n    const canvas =\n      ev.data instanceof OffscreenCanvas\n        ? ev.data\n        : ev.data === \"SELF_HOST_CANVAS\"\n        ? new OffscreenCanvas(0, 0)\n        : inlineThrow(\n            'Either transfer a OffScreenCanvas to worker or send string \"SELF_HOSTED_CANVAS\" as initial message to worker'\n          );\n    self.removeEventListener(\"message\", initialMessageHandler);\n    createTrackerCanvas(\n      canvas,\n      createWebWorkerMessageChannel(self as DedicatedWorkerGlobalScope),\n      true\n    );\n  }\n);\n"],"names":["getUpcomingPosition","prevPos","currentPos","length","Math","sqrt","pow","x","y","self","addEventListener","ev","canvas","data","OffscreenCanvas","inlineThrow","removeEventListener","initialMessageHandler","channelCreator","checkCollisions","channel","messagesFromTracker","messagesToTracker","context","getContext","lineWidth","on","info","height","width","scale","scaleFactor","prevPositions","forEach","pos","id","futurePos","getImageData","send","fill","beginPath","lineCap","strokeStyle","moveTo","lineTo","stroke","closePath","createWebWorkerMessageChannel"],"mappings":"iHAkEA,MAAMA,EAAsB,CAACC,EAAgBC,WACrCC,EAASC,KAAKC,KAClBD,KAAKE,IAAIL,EAAQM,EAAIL,EAAWK,EAAG,GACjCH,KAAKE,IAAIL,EAAQO,EAAIN,EAAWM,EAAG,UAEhC,CACLD,EAAGL,EAAWK,KAAiBA,EAAIN,EAAQM,GAAKJ,EAAU,EAC1DK,EAAGN,EAAWM,KAAiBA,EAAIP,EAAQO,GAAKL,EAAU,IAI9DM,KAAKC,iBACH,WACA,WAA+BC,SACvBC,EACJD,EAAGE,gBAAgBC,gBACfH,EAAGE,KACS,qBAAZF,EAAGE,KACH,IAAIC,gBAAgB,EAAG,GACvBC,EACE,qHAEHC,oBAAoB,UAAWC,GA7ExC,SACEL,EACAM,EACAC,eAEMC,EAAUF,EAAeG,EAAqBC,GAC9CC,EACJ,WAAOC,WAAW,SAClBT,EAAY,+CACVU,EAAY,IACRC,GAAG,cAAeC,MACjBC,OAASD,EAAKC,SACdC,MAAQF,EAAKE,QACZC,MAAMH,EAAKI,YAAaJ,EAAKI,eACzBJ,EAAKF,mBAEbO,EAAuC,KACrCN,GAAG,gBAAiBb,MACrBoB,SAASC,UACNjC,EAAU+B,EAAcE,EAAIC,MACpBD,EAAIC,IAAM,CAAE5B,EAAG2B,EAAI3B,EAAGC,EAAG0B,EAAI1B,SACrC4B,EACO,MAAXnC,OACUM,IAAM2B,EAAI3B,GAAKN,EAAQO,IAAM0B,EAAI1B,IAC3CR,EAAoBC,EAASiC,GAE7Bf,MACKZ,EAAI,GACP2B,EAAI3B,EAAIK,EAAOiB,OACfK,EAAI1B,EAAI,GACR0B,EAAI1B,EAAII,EAAOgB,QACdQ,GACkE,IAAjEb,EAAQc,aAAaD,EAAU7B,EAAG6B,EAAU5B,EAAG,EAAG,GAAGK,KAAK,OAGtDyB,KAAK,kBAAmBJ,EAAIC,IAEjCD,EAAIK,MAAmB,MAAXtC,MAITuC,cACAC,QAAU,WACVhB,UAAYA,IACZiB,YAAcR,EAAIK,OAClBI,OAAO1C,EAAQM,EAAGN,EAAQO,KAC1BoC,OAAOV,EAAI3B,EAAG2B,EAAI1B,KAClBqC,WACAC,cACAvC,EAAI2B,EAAI3B,IACRC,EAAI0B,EAAI1B,UA6BhBI,EACAmC,EAA8BtC,OAC9B"}