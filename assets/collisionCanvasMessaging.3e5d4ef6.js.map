{"version":3,"file":"collisionCanvasMessaging.3e5d4ef6.js","sources":["../../src/messaging/webWorkerMessageChannel.ts","../../src/utility.ts","../../src/collisionCanvas/collisionCanvasMessaging.ts"],"sourcesContent":["import setupMessageChannel, {\n  ConverterCollection,\n} from \"./setupMessageChannel\";\n\nexport function createWebWorkerMessageChannel(\n  worker: Worker | DedicatedWorkerGlobalScope\n) {\n  return <\n    SendMessages extends ConverterCollection,\n    ReceiveMessages extends ConverterCollection\n  >(\n    sends: SendMessages,\n    recieves: ReceiveMessages\n  ) =>\n    setupMessageChannel({\n      send: worker.postMessage.bind(worker),\n      bindReceive(receive) {\n        const listener = (ev: any) => receive(ev.data);\n        worker.addEventListener(\"message\", listener);\n        return () => worker.removeEventListener(\"message\", listener)\n      },\n    })(sends, recieves);\n}\n","export const typedEntries = Object.entries as <T, TKey extends keyof T>(\n  o: T\n) => [Extract<TKey, string>, T[TKey]][];\n\nexport const typedKeys = Object.keys as <T>(o: T) => (keyof T)[];\n\nexport function extractObjectDiff<T>(\n  source: T,\n  update: T,\n  ...omitTypes: string[]\n): Partial<T> {\n  return typedEntries(update ?? {})\n    .filter((entry) => !omitTypes.includes(typeof entry[1]))\n    .reduce((acc, [key, value]) => {\n      if (source?.[key] !== value) {\n        acc[key] = value;\n      }\n      return acc;\n    }, {} as Partial<T>);\n}\n\nexport function inlineThrow(err: string | Error): never {\n  throw typeof err === \"string\" ? new Error(err) : err;\n}\n","import { Converter, MessageChannel } from \"../messaging/setupMessageChannel\";\nimport { jsonConverter, stringConverter } from \"../messaging/valueConverters\";\n\nexport const messagesToTracker = {\n  canvasInfo: jsonConverter as Converter<{\n    width: number;\n    height: number;\n    scaleFactor: number;\n    lineWidth: number;\n  }>,\n  positionData: jsonConverter as Converter<\n    { id: string; x: number; y: number; fill?: string }[]\n  >,\n};\nexport const messagesFromTracker = {\n  reportCollision: stringConverter,\n};\n\nexport type TrackerMessageChannel = MessageChannel<\n  typeof messagesToTracker,\n  typeof messagesFromTracker\n>;\n"],"names":["worker","sends","recieves","setupMessageChannel","send","postMessage","bind","[object Object]","receive","listener","ev","data","addEventListener","removeEventListener","typedEntries","Object","entries","source","update","omitTypes","filter","entry","includes","reduce","acc","key","value","err","Error","messagesToTracker","canvasInfo","jsonConverter","positionData","messagesFromTracker","reportCollision","stringConverter"],"mappings":"2EAKEA,SAEO,CAILC,EACAC,IAEAC,EAAoB,CAClBC,KAAMJ,EAAOK,YAAYC,KAAKN,GAC9BO,YAAYC,SACJC,EAAYC,GAAYF,EAAQE,EAAGC,eAClCC,iBAAiB,UAAWH,GAC5B,IAAMT,EAAOa,oBAAoB,UAAWJ,KALvDN,CAOGF,EAAOC,SCrBDY,EAAeC,OAAOC,mBAOjCC,EACAC,KACGC,UAEIL,QAAaI,IAAU,IAC3BE,QAAQC,IAAWF,EAAUG,gBAAgBD,EAAM,MACnDE,QAAO,CAACC,GAAMC,EAAKC,wBACLD,MAASC,MAChBD,GAAOC,GAENF,IACN,eAGqBG,QACL,iBAARA,EAAmB,IAAIC,MAAMD,GAAOA,QCnBtCE,EAAoB,CAC/BC,WAAYC,EAMZC,aAAcD,GAIHE,EAAsB,CACjCC,gBAAiBC"}